<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JinChao&#39;s Notes</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fjluda.github.io/"/>
  <updated>2018-04-03T06:54:23.533Z</updated>
  <id>https://fjluda.github.io/</id>
  
  <author>
    <name>Jiang JinChao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://fjluda.github.io/2018/04/03/2018-4-2-hello-world/"/>
    <id>https://fjluda.github.io/2018/04/03/2018-4-2-hello-world/</id>
    <published>2018-04-02T16:00:00.000Z</published>
    <updated>2018-04-03T06:54:23.533Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="搭建博客" scheme="https://fjluda.github.io/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="npm" scheme="https://fjluda.github.io/tags/npm/"/>
    
      <category term="hexo" scheme="https://fjluda.github.io/tags/hexo/"/>
    
      <category term="github" scheme="https://fjluda.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>橡胶沥青应力吸收层施工方案</title>
    <link href="https://fjluda.github.io/2018/04/01/2018-04-01-%E6%A9%A1%E8%83%B6%E6%B2%A5%E9%9D%92%E5%BA%94%E5%8A%9B%E5%90%B8%E6%94%B6%E5%B1%82%E6%96%BD%E5%B7%A5%E6%96%B9%E6%A1%88/"/>
    <id>https://fjluda.github.io/2018/04/01/2018-04-01-橡胶沥青应力吸收层施工方案/</id>
    <published>2018-04-01T01:06:05.000Z</published>
    <updated>2018-04-02T23:50:40.570Z</updated>
    
    <content type="html"><![CDATA[<p>应力吸收层是指铺筑于半刚性基层与沥青路面之间或者水泥混凝土路面与沥青路面之间，具有高变形能力的改性沥青层，它能够吸收裂缝部位的应力集中，防止沥青路面形成反射裂缝，加强层间黏结与防水，延长路面使用寿命的特点。</p><h2 id="主要施工机械及检测仪器"><a href="#主要施工机械及检测仪器" class="headerlink" title="主要施工机械及检测仪器"></a>主要施工机械及检测仪器</h2><h3 id="1、-主要施工机械"><a href="#1、-主要施工机械" class="headerlink" title="1、 主要施工机械"></a>1、 主要施工机械</h3><ol><li>橡胶沥青生产设备一套</li><li>橡胶沥青碎石同步封层车一台</li><li>洒水车</li><li>森林灭火鼓风机2台</li><li>压路机：25T轮胎压路机1台</li><li>ZL50装载机1台</li></ol><h3 id="2、主要检测仪器"><a href="#2、主要检测仪器" class="headerlink" title="2、主要检测仪器"></a>2、主要检测仪器</h3><ol><li>沥青针入度仪器</li><li>沥青延度仪</li><li>沥青软化点仪</li><li>布式旋转粘度计</li><li>标准筛（方筛孔）</li></ol><h2 id="施工工艺"><a href="#施工工艺" class="headerlink" title="施工工艺"></a>施工工艺</h2><ol><li>施工前应进行基层的清扫、吸尘和清洗。<br>先人工用竹扫帚将基层表面进行全面清扫，再用2～3台森林灭火鼓风机沿纵向排成斜线将浮灰吹净，若不能达到”除净”的要求，则用水冲洗，清除基层表面浮灰和泥浆，尽量使基层顶面集料颗粒能部分外露。</li><li>确定橡胶粉的掺量<br>一般选择至少三个不同的橡胶粉掺量（例如14％、16％、18％）进行试验，将橡胶粉加入沥青的温度范围在177～204℃之间，拌和1小时后进行试验。根据试验结果选取合适的橡胶粉掺量，橡胶沥青各项指标应满足表3技术要求。</li><li>橡胶沥青的生产<br>应由熟练人员操作橡胶沥青生产设备，采用间歇式方式生产。操作人员准确控制导热油温度，准确控制配料比例。对成品橡胶沥青及时进行各项检验。</li><li>在洒布橡胶沥青前，应注意检查<br>空气温度和地面温度都不得低于15℃，下承层必须干燥，路缘石防护良好。风速不影响橡胶沥青洒布效果。需用的设备进入待命状态，包括橡胶沥青洒布车、碎石撒布机、胶轮压路机。</li><li>橡胶沥青洒布<br>橡胶沥青洒布量采用1.5～2.0kg/㎡,采用预裹附的集料时。 起步和终止位置应铺工程纸（油毛毡），以准确进行横向衔接，洒布车经过后应及时取走工程纸。 纵向衔接应与已洒布部分重叠10cm左右。 撒铺碎石前禁止任何车辆、行人通过橡胶沥青层。</li><li>撒铺碎石<br>喷洒橡胶沥青后应立即撒铺碎石，碎石撒铺量为8-12 kg/㎡,根据试铺情况确定，以满铺、不散失为度，碎石覆盖率要达到80%以上,对于局部碎石撒铺量不足的地方，用人工补足。</li><li>碾压<br>采用25T以上的胶轮压路机进行压实。碎石撒铺后应立即进行碾压作业，胶轮压路机应同时进行碾压，紧跟碎石撒铺车，碾压数为2遍。</li><li>在铺筑上层沥青混合料前，应对橡胶沥青应力吸收层进行清扫，以清除没有粘结的松散碎石，避免影响应力吸收层与上面层的粘结。</li><li>橡胶沥青应力吸收层施工应与上面层沥青混凝土紧凑进行，中间不开放交通，若期间必须开放交通，须待应力吸收层施工完成3小时后方可开放交通，但车速不宜超过25km/h。</li></ol><h2 id="橡胶沥青应力吸收层施工要求"><a href="#橡胶沥青应力吸收层施工要求" class="headerlink" title="橡胶沥青应力吸收层施工要求"></a>橡胶沥青应力吸收层施工要求</h2><h3 id="1、原材料质量控制要求"><a href="#1、原材料质量控制要求" class="headerlink" title="1、原材料质量控制要求"></a>1、原材料质量控制要求</h3><p><strong>橡胶粉</strong><br>橡胶粉颗粒规格应符合下表要求。橡胶粉筛分应采用水筛法进行试验。橡胶粉密度应为1.15   0.05 g/cm3，应无铁丝或其它杂质，纤维比例应不超过0.5%。<br>供应商应提供橡胶粉质量保证书，说明橡胶粉规格、加工方式、加工的废旧轮胎类型、橡胶粉的储存方式等。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-01 下午6.08.05.png" alt="屏幕快照 2018-04-01 下午6.08.05-w600"></p><p><strong>橡胶沥青</strong><br>橡胶改性沥青应满足以下技术要求，其抽检项目符合下表的要求。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-01 下午6.08.15.png" alt="屏幕快照 2018-04-01 下午6.08.15-w600"></p><p><strong>集料</strong><br>应力吸收层应采用石质坚硬、清洁、不含风化颗粒、近立方体颗粒的破碎卵碎石，应选用反击式破碎机轧制的碎石，规格为5mm～10mm。<br>橡胶沥青应力吸收层集料级配范围如下表。 </p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-01 下午6.08.27.png" alt="屏幕快照 2018-04-01 下午6.08.27-w600"></p><h3 id="2、质量管理"><a href="#2、质量管理" class="headerlink" title="2、质量管理"></a>2、质量管理</h3><ol><li>施工阶段的检测项目包括：橡胶沥青性质、橡胶沥青洒布量、集料洒布量、刹车试验、外观检查等。</li><li><p>检验方法及检验标准见下表<br><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-01 下午6.08.41.png" alt="屏幕快照 2018-04-01 下午6.08.41-w600"></p></li><li><p>橡胶沥青洒布量和碎石洒铺量控制<br><strong>沥青洒布量控制</strong><br>将要洒布沥青时，在标准尺寸矩形容器内置沥青油毡，称其重量并置于洒布车前5～10m，待洒布车经过容器后立即取出再称其重，以此计算实际撒布量，再结合沥青洒布车电脑调节装置直到设计洒布量为止。<br><strong>碎石撒布量控制</strong><br>将要洒布碎石时，取一标准尺寸矩形容器称其重量并置于撒布车前已洒布沥青路面的路段最尾处，待洒布车经过容器后立即取出再称其重，以此计算实际洒布量，然后通过调节装置直至调到设计洒布量为止。</p></li><li><p>橡胶沥青施工时间关键点</p><ul><li>沥青车预热准备时间为2小时</li><li>沥青撤布车，泵满6吨沥青的时间为20分钟。</li><li>沥青撒布车每6吨橡胶沥青每升温10℃时间约为1小时，185℃升到200℃需要约90分钟。</li><li>正常的工作时间。撤布完6吨橡胶沥青的时间为1-2小时。</li></ul></li></ol><h2 id="原材料规格及厂家"><a href="#原材料规格及厂家" class="headerlink" title="原材料规格及厂家"></a>原材料规格及厂家</h2><h3 id="1、基质沥青"><a href="#1、基质沥青" class="headerlink" title="1、基质沥青"></a>1、基质沥青</h3><p>橡胶沥青所用的基质沥青采用70号道路石油沥青，其技术要求见表1。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-01 下午6.09.23.png" alt="屏幕快照 2018-04-01 下午6.09.23-w600"></p><h3 id="2、橡胶粉"><a href="#2、橡胶粉" class="headerlink" title="2、橡胶粉"></a>2、橡胶粉</h3><p>橡胶沥青所采用的橡胶粉规格应符合表2要求。橡胶粉筛分应采用水筛法进行试验。橡胶粉密度应为1.15   0.05 g/cm3，应无铁丝或其它杂质，纤维比例应不超过0.5%，要求含有橡胶粉重量4%的碳酸钙，以防止胶粉颗粒相互粘结。<br>供应商应提供橡胶粉质量保证书，说明橡胶粉规格、加工方式、加工的废旧轮胎类型、橡胶粉的储存方式等。</p><p><img src="http://p5mgr4bgm.bkt.clouddn.com/屏幕快照 2018-04-01 下午6.19.05.png" alt="屏幕快照 2018-04-01 下午6.19.05-w600"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;应力吸收层是指铺筑于半刚性基层与沥青路面之间或者水泥混凝土路面与沥青路面之间，具有高变形能力的改性沥青层，它能够吸收裂缝部位的应力集中，防止沥青路面形成反射裂缝，加强层间黏结与防水，延长路面使用寿命的特点。&lt;/p&gt;
&lt;h2 id=&quot;主要施工机械及检测仪器&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="施工方案" scheme="https://fjluda.github.io/categories/%E6%96%BD%E5%B7%A5%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="施工" scheme="https://fjluda.github.io/tags/%E6%96%BD%E5%B7%A5/"/>
    
      <category term="橡胶沥青" scheme="https://fjluda.github.io/tags/%E6%A9%A1%E8%83%B6%E6%B2%A5%E9%9D%92/"/>
    
      <category term="应力吸收层" scheme="https://fjluda.github.io/tags/%E5%BA%94%E5%8A%9B%E5%90%B8%E6%94%B6%E5%B1%82/"/>
    
      <category term="路面" scheme="https://fjluda.github.io/tags/%E8%B7%AF%E9%9D%A2/"/>
    
  </entry>
  
  <entry>
    <title>非离子乳化沥青防水涂料的配方及制作工艺</title>
    <link href="https://fjluda.github.io/2018/03/31/2018-03-31-%E9%9D%9E%E7%A6%BB%E5%AD%90%E4%B9%B3%E5%8C%96%E6%B2%A5%E9%9D%92%E9%98%B2%E6%B0%B4%E6%B6%82%E6%96%99%E7%9A%84%E9%85%8D%E6%96%B9%E5%8F%8A%E5%88%B6%E4%BD%9C%E5%B7%A5%E8%89%BA/"/>
    <id>https://fjluda.github.io/2018/03/31/2018-03-31-非离子乳化沥青防水涂料的配方及制作工艺/</id>
    <published>2018-03-31T01:06:05.000Z</published>
    <updated>2018-04-02T23:47:58.337Z</updated>
    
    <content type="html"><![CDATA[<p>乳化沥青防水涂料是一种非离子型冷施工的防水、黏结材料。施工时呈液态，为棕褐色液体（硬化后成黑色），本产品无毒、无臭、不燃，具有良好的涂覆和黏结性，干燥快，干燥后变成一种稳定的薄膜，是一种“湿流干凝”材料。</p><h2 id="原料及制作工艺"><a href="#原料及制作工艺" class="headerlink" title="原料及制作工艺"></a>原料及制作工艺</h2><p><strong>原料</strong></p><ul><li>甲液：平平加O（2.2-2.4）</li><li>聚乙烯醇（4-4.2）</li><li>氢氧化钠（0.45-0.5）</li><li>泡花碱（中性）（1.4-1.6）</li><li>水（100）</li><li>乙液：10#沥青（25）、60#沥青（75）</li></ul><p><strong>制作工艺</strong></p><ol><li>将10#和60#沥青按配合比称量加入锅内，加热至200-220℃溶液脱水过滤后，降温至150-160℃以备待用（<code>乙液</code>）;</li><li>按配合比称取一定数量的基乙烯醇加入桶内（<em>用前先用少量清水浸泡一夜，便于加热溶化</em>）加入一定量的水，用水浴法加热搅拌使之溶解。;</li><li>将乳化剂按配合比分别加入已知质量的80-90℃热水中。加料次序是先加氢氧化钠，搅拌使其溶解，随即加泡花碱及聚乙烯醇搅拌均匀，再加平平加O成为混合液，再加足水量保持<strong>70-80</strong>℃左右待用（<code>甲液</code>）;</li><li>将乳化剂溶液（甲液）倒入搅拌机中，开机搅拌，即将事先准备好的沥青溶液（<code>乙液</code>）徐徐注入匀化机中进行乳化，经3-4min后，将出料阀门打开，将乳化沥青放出，经冷却装桶密封保存。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;乳化沥青防水涂料是一种非离子型冷施工的防水、黏结材料。施工时呈液态，为棕褐色液体（硬化后成黑色），本产品无毒、无臭、不燃，具有良好的涂覆和黏结性，干燥快，干燥后变成一种稳定的薄膜，是一种“湿流干凝”材料。&lt;/p&gt;
&lt;h2 id=&quot;原料及制作工艺&quot;&gt;&lt;a href=&quot;#原料及
      
    
    </summary>
    
      <category term="乳化沥青" scheme="https://fjluda.github.io/categories/%E4%B9%B3%E5%8C%96%E6%B2%A5%E9%9D%92/"/>
    
    
      <category term="工艺" scheme="https://fjluda.github.io/tags/%E5%B7%A5%E8%89%BA/"/>
    
      <category term="乳化沥青" scheme="https://fjluda.github.io/tags/%E4%B9%B3%E5%8C%96%E6%B2%A5%E9%9D%92/"/>
    
      <category term="防水" scheme="https://fjluda.github.io/tags/%E9%98%B2%E6%B0%B4/"/>
    
      <category term="配方" scheme="https://fjluda.github.io/tags/%E9%85%8D%E6%96%B9/"/>
    
  </entry>
  
  <entry>
    <title>SBS胶乳改性乳化沥青稳定性研究</title>
    <link href="https://fjluda.github.io/2018/03/30/2018-03-30-SBS%E8%83%B6%E4%B9%B3%E6%94%B9%E6%80%A7%E4%B9%B3%E5%8C%96%E6%B2%A5%E9%9D%92%E7%A8%B3%E5%AE%9A%E6%80%A7%E7%A0%94%E7%A9%B6/"/>
    <id>https://fjluda.github.io/2018/03/30/2018-03-30-SBS胶乳改性乳化沥青稳定性研究/</id>
    <published>2018-03-30T11:06:05.000Z</published>
    <updated>2018-04-02T23:48:16.442Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>胶乳类作为改性剂制备改性乳化沥青时，乳化沥青和胶乳在乳化剂的作用下，破坏各自原有的平衡，重新建立起一种新的平衡，如果这种平衡不能稳定存在，将会影响改性乳化沥青的生产、储存和使用。因此，乳液稳定性是评价改性乳化沥青的关键指标。而改性乳化沥青的稳定性与制备工艺、乳化剂用量、胶乳与乳化沥青颗粒大小等诸多因素有关。从热力学的角度分析，任何乳状液都不是稳定的，随着时间的推移、环境温度的变化或接触介质的变化，都可能引起乳状液的分层、絮凝和聚集，最终导致乳状液的破坏。改性乳化沥青是一种热力学不稳定体系，其稳定性是由所添加的乳化剂、乳液稳定剂等产生的各种作用而引起的。维持乳液稳定性的各种理论主要有吸附理论、膜理论、吸附双电层理论等。</p></blockquote><h2 id="1-试验部分"><a href="#1-试验部分" class="headerlink" title="1. 试验部分"></a>1. 试验部分</h2><h3 id="试验原料"><a href="#试验原料" class="headerlink" title="试验原料"></a>试验原料</h3><ul><li>基质沥青：胜利90号；</li><li>乳化剂：JQT，阳离子型，江阴峭歧股份有限公司生产；</li><li>改性剂：自制的SBS胶乳：固含量为40.68%，具有很好的稳定性；</li><li>稳定剂；CaCl2：化学纯；聚丙烯酰胺；</li><li>盐酸：化学纯。 </li></ul><h3 id="试验设备"><a href="#试验设备" class="headerlink" title="试验设备"></a>试验设备</h3><p>沥青乳化机：温州兴达机械制造厂生产，型号YXD-60。</p><h3 id="制备工艺"><a href="#制备工艺" class="headerlink" title="制备工艺"></a>制备工艺</h3><p>按胶乳混合状态分类，改性乳化沥青的制备方法通常有3种：二次热混合法、一次热混合法和一次冷混合法。目前普遍认为二次热混合法的乳化效果较好。试验采用二次热混合法，其工艺流程见图1。即先将SBS胶乳和乳化剂的水溶液经混合剪切进行第一次混合，然后再加入热的沥青，在沥青乳化剂的作用下进行第二次乳化分散的过程。</p><h2 id="2-SBS胶乳的制备"><a href="#2-SBS胶乳的制备" class="headerlink" title="2. SBS胶乳的制备"></a>2. SBS胶乳的制备</h2><p>取25g线型的SBS-792于烧杯中，加入一定量的甲苯溶剂，放置1h，使得SBS充分溶胀；再于烧杯中加入定量的以阳离子为主的复配型乳化剂，此混合液在高分散乳化机作用下，慢慢注入定量的热蒸馏水，在此过程中，乳化机的转速为10 000rpm；待水加入完毕后，调节乳化机转速至16 000rpm，作用30min，得O/W型初级乳液；此初级乳液通过减压蒸馏分出其中的甲苯溶剂，得SBS胶乳。</p><h2 id="3-试验结果与讨论"><a href="#3-试验结果与讨论" class="headerlink" title="3. 试验结果与讨论"></a>3. 试验结果与讨论</h2><h3 id="乳化剂用量的影响"><a href="#乳化剂用量的影响" class="headerlink" title="乳化剂用量的影响"></a>乳化剂用量的影响</h3><p>乳化剂的用量少，乳化效果不好，乳液中沥青微粒粒径大小不均，体系的储存稳定性下降；用量多，使生产成本提高，造成浪费。通过考察乳化剂用量对沥青乳化后储存稳定性的影响，进而也可以确定乳化剂的最佳用量。影响见图2。改性乳化沥青中，SBS胶乳的含量为总物料的6%。<br>从图2可以看出，乳化剂的用量在0.4%-0.8%范围内时，乳化沥青的储存稳定性随乳化剂的用量变化很大，当用量大于0.8%时，乳化沥青的储存稳定性几乎保持不变，且乳液具有很好的储存稳定性。对于加入6%SBS胶乳(相当于4.8%的固体SBS含量)的改性乳化沥青，乳化剂用量小于1%时，其储存稳定性随乳化剂用量的增加变化较大，乳化剂用量大于1%，乳化剂的用量对改性乳化沥青的储存稳定性影响较小，体系趋于稳定。<br>当乳化剂用量较少时，乳化剂不能使水的表面张力充分降低，沥青和水几乎是直接接触着的，乳化效果不好，所以稳定性差；随着乳化剂量的增加，沥青乳液逐渐开始趋向于稳定的状态，乳化剂分子的亲水和亲油基团分别和水、改性沥青结合。再增加乳化剂用量，沥青乳液稳定性的变化不大时，说明沥青乳液中乳化剂含量已经达到临界胶束浓度。从图2可以看出，阳离子乳化剂JQT在含量为1%时才能在改性乳化沥青中达到临界胶束浓度。</p><h3 id="稳定剂用量的影响"><a href="#稳定剂用量的影响" class="headerlink" title="稳定剂用量的影响"></a>稳定剂用量的影响</h3><p>用单一乳化剂制备沥青乳液，其乳液颗粒有时会粗大不均，易发生絮凝或者沉降现象。</p><p>如果在单一乳化剂中添加稳定剂制备沥青乳液，则可以得到颗粒均匀而微细的乳液。稳定剂包括无机稳定剂和有机稳定剂。其中稳定效果最好的无机盐类物质为氯化铵和氯化钙。有机盐类稳定剂有胺类、聚乙烯醇、聚丙烯酰胺、羧甲基纤维素钠等，因此选择适宜的稳定剂是保证乳化沥青稳定的重要措施。</p><p>试验在乳化剂和改性剂用量为总物料的1%和6%条件下，分别考察无机稳定剂CaCl2和有机稳定剂聚丙烯酰胺及其复配后对改性乳化沥青储存稳定性的影响。见图3。</p><p>图3表明，无论是无机类还是有机类稳定剂，改性乳化沥青的储存稳定性并不随其用量的增加而呈现降低的趋势，其用量存在一个最佳值。出现此原因，主要是因为添加稳定剂能够增强乳液颗粒周围的双电层效应，增加f电位和颗粒之间的相互排斥力，只有当颗粒间的排斥力达到某一平衡时，颗粒间才可以稳定共存；排斥力太大或太小，都会使得颗粒之间存在凝聚，不能起到很好的稳定效果。由此可以看出，CaCl2的最佳用量为0.2%；聚丙烯酰胺和1：1质量比复配的CaCl2和聚丙烯酰胺的最佳用量都为0.15%。</p><p>从图3中还可以看出，聚丙烯酰胺的稳定效果优于CaCl2，究其原理，是沥青乳液中加入聚丙烯酰胺稳定剂，可以提高水相粘度，能在分散的微粒上形成界面膜，使其微粒相互碰撞时不易聚结，减小沥青微粒的沉降速度。界面膜由密排的定向分子组成，膜的强度较大，沥青微粒聚结需要克服的阻力也大，因而沥青乳液越能稳定。加入CaCl2后增大水相密度，减小与沥青相的密度差，能够增强乳液颗粒周围的双电层效应，增大f电位，增加颗粒之间的相互排斥力，减缓颗粒之间的合一凝聚速度。从试验结果可以看出，对于胜利90号重交通道路石油沥青来说，增加乳液的粘度和密度虽都可以达到稳定的效果，但是粘度的增加对储存稳定性的贡献更大。而复配的CaCl2和聚丙烯酰胺作为稳定剂时，其一方面增加水相的粘度，另一方面增加水相的密度，在与单一稳定剂用量相同的条件下，其可以起到双重的稳定效果，故可以大大改善改性乳化沥青的储存稳定牲。因此，对于胜利90号重交通道路石油沥青，采用无机和有机复配的稳定剂效果最好。</p><h3 id="乳化剂溶液的pH值的影响"><a href="#乳化剂溶液的pH值的影响" class="headerlink" title="乳化剂溶液的pH值的影响"></a>乳化剂溶液的pH值的影响</h3><p>对于阳离子乳化剂，主要在酸性条件下使用。以季铵盐型乳化剂配制乳化液时，由于其乳化剂易溶于水，不需添加酸。但如果在季铵盐中添加有机或者无机酸调整溶液的pH值，能够增强乳化剂本身的活性，在提高乳化稳定性和储存稳定性的同时，可以降低乳化剂的用量。<br>此试验采用盐酸来调节乳化剂的pH值，在没有添加稳定剂的条件下考察乳液pH值对改性乳化沥青存储稳定性的影响。其中SBS胶乳的加入量为6%，乳化剂用量为l%。<code>见表l</code>。</p><p>表1  乳化剂水溶液pH值对改性乳化沥青储存稳定性的影响<br><img src="http://p5mgr4bgm.bkt.clouddn.com/15223956090185.jpg" alt="表1-w700"></p><p>从表1可以看出，乳化剂水溶液本身的pH值范围为5-6，而与SBS胶乳的pH值的范围相同，因此两种乳液混合后颗粒的稳定性好。对于乳化沥青来说，加入酸，可能会使乳液达到较好的稳定性，而在此试验中效果恰恰相反，从表中数据可以看出，随着酸的加入，pH变小，体系的储存稳定性下降。由此可见，在采用胶乳类改性剂制备改性乳化沥青时，要得到稳定体系，需调整乳化剂水溶液的pH值与改性剂乳液的一致。</p><h3 id="SBS胶乳对体系微观稳定性的影响"><a href="#SBS胶乳对体系微观稳定性的影响" class="headerlink" title="SBS胶乳对体系微观稳定性的影响"></a>SBS胶乳对体系微观稳定性的影响</h3><p>由于SBS胶乳作为改性剂时，其用量只有百分之几，考察其对改性乳化沥青储存稳定性的影响，不能从根本上反映出SBS在体系中的分散状况，因此本试验采用德国莱卡公司生产的光学电子显微镜进行分析。图4和图5分别为改性剂SBS胶乳用量为6%时的光学显微镜图。<br>放大倍数分别为400和l 000倍。从图中可以看出SBS颗粒(白色颗粒)在乳化沥青中分散比较均匀，没有明显的聚集结胶现象。<br>通过透射电镜分析，得出SBS颗粒平均粒径为1.97 p.m，沥青的平均粒径为2.53 p.m。测量SBS胶乳20C的密度为0.990lg/cm-1，乳化沥青的密度1.089g/cm-1。两者颗粒大小、密度的相近是保证SBS在体系中均匀分散的重要因素。<br>此外，影响改性乳化沥青稳定性的因素还有制备工艺、乳化设备、沥青特性等诸多因素。为了使改性乳化沥青具有一定的稳定性，.在研制生产过程中，应采取以下措施：(1)应尽量选择结构与沥青组成结构相同或相似的乳化剂以提高其亲和力，且乳化剂的用量要达到临界胶束浓度；(2)应设法提高连续相(水相)的粘度，以降低颗粒的沉降速率；(3)应尽量减少分散相与连续相之间的密度差；(4)应调整乳化剂水溶液的pH值，以保证对沥青的完全乳化，此外也要与胶乳类改性剂的pH值相同或接近；(5)应尽量选用乳化后颗粒大小与沥青颗粒大小相近的改性剂。</p><h2 id="4-SBS胶乳改性乳化沥青的性能分析"><a href="#4-SBS胶乳改性乳化沥青的性能分析" class="headerlink" title="4  SBS胶乳改性乳化沥青的性能分析"></a>4  SBS胶乳改性乳化沥青的性能分析</h2><p>根据稳定性考察得出的各影响因素的最佳用量制备改性乳化沥青，即乳化剂JQT的用量为1%；SBS胶乳用量为6%；稳定剂选用1 c1质量比复配的。CaCl2和聚丙烯酰胺，用量为o.15%。其中沥青与水的比例为50：50，乳化机转速1 000rpm，乳化时间为3rain。对其的性质进行分析，分别采用相应的行业标准。具体数据列于<code>下表2</code>。<br> <img src="http://p5mgr4bgm.bkt.clouddn.com/15223956888655.jpg" alt="表2-w700"></p><p>从表2中可以看出，所制备的改性乳化沥青的各项性能均满足公路施工技术规范的要求，是一效果较好的改性乳化沥青。从蒸发残留物性能来看，改性后针入度、软化点和延度相对于基质沥青(25℃针入度：85 1/10mm；软化点：47.5C，5C延度：脆断)都有不同程度的改善，进而说明SBS胶乳对沥青具有很好的改性效果，是一性能较好的改性剂乳液。</p><h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5  结论"></a>5  结论</h2><ul><li>阳离子乳化剂JQT在用量为1%时达到其临界胶束浓度，即其的最佳用量为1%。<br>-对于胜利90号重交通道路石油沥青，无机类和有机类稳定剂复配后可以大大提高其的储存稳定性。</li><li>对于乳化剂JQT，加酸降低其水溶液的pH值反而对改性乳化沥青的储存稳定性不利。</li><li>SBS颗粒的大小和密度与乳化后沥青颗粒的大小和乳化沥青的密度匹配时，可以使得SBS颗粒在乳化沥青中分散均匀。</li><li>根据试验得出的各因素的最佳用量制备出性能优良的改性乳化沥青，通过SBS胶乳改性前后沥青的三项指标分析得出，SBS胶乳具有很好的改性效果，是一较好的改性剂乳液。</li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;胶乳类作为改性剂制备改性乳化沥青时，乳化沥青和胶乳在乳化剂的作用下，破坏各自原有的平衡，重新建立起一种新的平衡，如果这种平衡不能稳定存在，将会影响改性乳化沥青的生产、储存和使用。因此，乳液稳定性是评价改性乳化沥青的关键指标。而改性乳化沥青的稳定性与
      
    
    </summary>
    
      <category term="改性乳化沥青" scheme="https://fjluda.github.io/categories/%E6%94%B9%E6%80%A7%E4%B9%B3%E5%8C%96%E6%B2%A5%E9%9D%92/"/>
    
    
      <category term="工艺" scheme="https://fjluda.github.io/tags/%E5%B7%A5%E8%89%BA/"/>
    
      <category term="SBS" scheme="https://fjluda.github.io/tags/SBS/"/>
    
      <category term="改性乳化沥青" scheme="https://fjluda.github.io/tags/%E6%94%B9%E6%80%A7%E4%B9%B3%E5%8C%96%E6%B2%A5%E9%9D%92/"/>
    
      <category term="稳定性" scheme="https://fjluda.github.io/tags/%E7%A8%B3%E5%AE%9A%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04设置Pycharm桌面快捷键</title>
    <link href="https://fjluda.github.io/2018/03/30/2017-12-13-Ubuntu16.04-pycharm-icon-setting/"/>
    <id>https://fjluda.github.io/2018/03/30/2017-12-13-Ubuntu16.04-pycharm-icon-setting/</id>
    <published>2018-03-30T01:15:16.124Z</published>
    <updated>2018-04-02T23:48:52.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ubuntu下所有的快捷方式都在："><a href="#Ubuntu下所有的快捷方式都在：" class="headerlink" title="Ubuntu下所有的快捷方式都在："></a>Ubuntu下所有的快捷方式都在：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/applications</span><br></pre></td></tr></table></figure><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p>这里我将pycharm下载并解压到了/home/snakeson/developer文件夹下</p><p>这里的pycharm.sh是批处理执行文件，prcharm.png是快捷方式图标</p><h2 id="终端打开"><a href="#终端打开" class="headerlink" title="终端打开"></a>终端打开</h2><p>使用Ubuntu终端进行打开：<br>方法一（使用vim）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi  /usr/share/applications/pycharm.desktop</span><br></pre></td></tr></table></figure></p><p>方法二（使用gedit）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit  /usr/share/applications/pycharm.desktop</span><br></pre></td></tr></table></figure><p>然后就会弹出一个新框：</p><h2 id="张贴"><a href="#张贴" class="headerlink" title="张贴"></a>张贴</h2><p>我们将下面的内容贴上去：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Type=Application</span><br><span class="line">Name=Pycharm</span><br><span class="line">GenericName=Pycharm3</span><br><span class="line">Comment=Pycharm3:The Python IDE</span><br><span class="line">Exec=<span class="string">"/home/snakeson/developer/pycharm-community-2017.2.3/bin/pycharm.sh"</span> %f</span><br><span class="line">Icon=<span class="regexp">/home/</span>snakeson/developer/pycharm-community<span class="number">-2017.2</span><span class="number">.3</span>/bin/pycharm.png</span><br><span class="line">Terminal=pycharm</span><br><span class="line">Categories=Pycharm;</span><br></pre></td></tr></table></figure></p><hr><p>注意一定要将Desktop Entry复制进去，也就是上面的全部都要复制进去，这里我们需要替换掉两个地方：<strong>Exec=”xx”</strong>和<strong>Icon=</strong>,这里要替换掉我们的pycharm解压的目录，当然了，我已经替换好了，如果你的目录跟我的目录不一样的话，你得把路径给换了，不管你是pycharm2017还是pycharm2016,，例如Comment什么的都不要改变，只变上面提到的两个路径就可以了。</p><h2 id="添加可执行权限"><a href="#添加可执行权限" class="headerlink" title="添加可执行权限"></a>添加可执行权限</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/share/applications/pycharm.desktop</span><br></pre></td></tr></table></figure><h2 id="拷贝到桌面"><a href="#拷贝到桌面" class="headerlink" title="拷贝到桌面"></a>拷贝到桌面</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将/usr/share/applications/pycharm.desktop文件拷贝到桌面，双击即可运行。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ubuntu下所有的快捷方式都在：&quot;&gt;&lt;a href=&quot;#Ubuntu下所有的快捷方式都在：&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu下所有的快捷方式都在：&quot;&gt;&lt;/a&gt;Ubuntu下所有的快捷方式都在：&lt;/h2&gt;&lt;figure class
      
    
    </summary>
    
      <category term="SnakeSon" scheme="https://fjluda.github.io/categories/SnakeSon/"/>
    
    
      <category term="Ubuntu" scheme="https://fjluda.github.io/tags/Ubuntu/"/>
    
      <category term="Pycharm" scheme="https://fjluda.github.io/tags/Pycharm/"/>
    
  </entry>
  
  <entry>
    <title>这是我自己来测试的md页面</title>
    <link href="https://fjluda.github.io/2018/03/30/2017-12-04-test-my-webapp/"/>
    <id>https://fjluda.github.io/2018/03/30/2017-12-04-test-my-webapp/</id>
    <published>2018-03-30T01:15:16.123Z</published>
    <updated>2018-04-02T23:50:18.985Z</updated>
    
    <content type="html"><![CDATA[<p>关于写倒计时大家可能都都比较熟悉，使用 setTimeout 或 setInterval 就可以搞定。几秒钟或者几分钟的倒计时这样写没有问题，但是如果是长时间的倒计时，这样写就会不准确。如果用户修改了他的设备时间，这样的倒计时就没有意义了。今天就说说写一个精确的倒计时的方法。</p><p><img src="https://img.alicdn.com/tfs/TB18QnlOpXXXXcVXpXXXXXXXXXX-388-256.png" alt=""></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>众所周知 setTimeout 或者 setInterval 调用的时候会有微小的误差。有人做了一个 <a href="https://bl.ocks.org/kenpenn/raw/92ebaa71696b4c4c3acd672b1bb3f49a/" target="_blank" rel="noopener">demo</a> 来观察这个现象并对其做了修正。短时间的误差倒也可以接受，但是作为一个长时间的倒计时，误差累计就会导致倒计时不准确。</p><p>因此我们可以在获取剩余时间的时候，每次 new 一个设备时间，因为设备时间的流逝相对是准确的，并且如果设备打开了网络时间同步，也会解决这个问题。</p><p>但是，如果用户修改了设备时间，那么整个倒计时就没有意义了，用户只要将设备时间修改为倒计时的 endTime 就可以轻易看到倒计时结束是页面的变化。因此一开始获取服务端时间就是很重要的。</p><p>简单的说，一个简单的精确倒计时原理如下：</p><ul><li>初始化时请求一次服务器时间 serverTime，再 new 一个设备时间 deviceTime</li><li>deviceTime 与 serverTime 的差作为时间偏移修正</li><li>每次递归时 new 一个系统时间，解决 setTimeout 不准确的问题</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>获取剩余时间的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取剩余时间</span></span><br><span class="line"><span class="comment"> * @param  &#123;Number&#125; endTime    截止时间</span></span><br><span class="line"><span class="comment"> * @param  &#123;Number&#125; deviceTime 设备时间</span></span><br><span class="line"><span class="comment"> * @param  &#123;Number&#125; serverTime 服务端时间</span></span><br><span class="line"><span class="comment"> * @return &#123;Object&#125;            剩余时间对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> getRemainTime = <span class="function">(<span class="params">endTime, deviceTime, serverTime</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> t = endTime - <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>()) - serverTime + deviceTime</span><br><span class="line">    <span class="keyword">let</span> seconds = <span class="built_in">Math</span>.floor((t / <span class="number">1000</span>) % <span class="number">60</span>)</span><br><span class="line">    <span class="keyword">let</span> minutes = <span class="built_in">Math</span>.floor((t / <span class="number">1000</span> / <span class="number">60</span>) % <span class="number">60</span>)</span><br><span class="line">    <span class="keyword">let</span> hours = <span class="built_in">Math</span>.floor((t / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>)) % <span class="number">24</span>)</span><br><span class="line">    <span class="keyword">let</span> days = <span class="built_in">Math</span>.floor(t / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>))</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'total'</span>: t,</span><br><span class="line">        <span class="string">'days'</span>: days,</span><br><span class="line">        <span class="string">'hours'</span>: hours,</span><br><span class="line">        <span class="string">'minutes'</span>: minutes,</span><br><span class="line">        <span class="string">'seconds'</span>: seconds</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>获取服务器时间可以使用 mtop 接口 <code>mtop.common.getTimestamp</code> </del></p><p>然后可以通过下面的方式来使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取服务端时间（获取服务端时间代码略）</span></span><br><span class="line">getServerTime(<span class="function">(<span class="params">serverTime</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置定时器</span></span><br><span class="line">    <span class="keyword">let</span> intervalTimer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到剩余时间</span></span><br><span class="line">        <span class="keyword">let</span> remainTime = getRemainTime(endTime, deviceTime, serverTime)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 倒计时到两个小时内</span></span><br><span class="line">        <span class="keyword">if</span> (remainTime.total &lt;= <span class="number">7200000</span> &amp;&amp; remainTime.total &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//倒计时结束</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (remainTime.total &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            clearInterval(intervalTimer);</span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样的的写法也可以做到准确倒计时，同时也比较简洁。不需要隔段时间再去同步一次服务端时间。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>在写倒计时的时候遇到了一个坑这里记录一下。</p><p><strong>千万别在倒计时结束的时候请求接口</strong>。会让服务端瞬间 QPS 峰值达到非常高。</p><p><img src="https://img.alicdn.com/tfs/TB1LBzjOpXXXXcnXpXXXXXXXXXX-154-71.png" alt=""></p><p>如果在倒计时结束的时候要使用新的数据渲染页面，正确的做法是：</p><p>在倒计时结束前的一段时间里，先请求好数据，倒计时结束后，再渲染页面。</p><p>关于倒计时，如果你有什么更好的解决方案，欢迎评论交流。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于写倒计时大家可能都都比较熟悉，使用 setTimeout 或 setInterval 就可以搞定。几秒钟或者几分钟的倒计时这样写没有问题，但是如果是长时间的倒计时，这样写就会不准确。如果用户修改了他的设备时间，这样的倒计时就没有意义了。今天就说说写一个精确的倒计时的方法
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://fjluda.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://fjluda.github.io/tags/JavaScript/"/>
    
      <category term="countdown" scheme="https://fjluda.github.io/tags/countdown/"/>
    
  </entry>
  
  <entry>
    <title>Fisher–Yates shuffle 洗牌算法</title>
    <link href="https://fjluda.github.io/2018/03/30/2016-10-16-shuffle-algorithm/"/>
    <id>https://fjluda.github.io/2018/03/30/2016-10-16-shuffle-algorithm/</id>
    <published>2018-03-30T01:15:16.121Z</published>
    <updated>2018-04-03T11:29:12.818Z</updated>
    
    <content type="html"><![CDATA[<p>简单来说 Fisher–Yates shuffle 算法是一个用来将一个有限集合生成一个随机排列的算法（数组随机排序）。这个算法生成的随机排列是等概率的。同时这个算法非常高效。</p><p>本文主要介绍这个算法的来源、演变、原理。并举出一个例子为大家清晰的描述每次迭代过程。最后使用 JavaScript 代码将算法实现。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/7c/Riffle_shuffle.jpg/320px-Riffle_shuffle.jpg" alt=""></p><h2 id="Fisher-and-Yates-的原始版"><a href="#Fisher-and-Yates-的原始版" class="headerlink" title="Fisher and Yates 的原始版"></a>Fisher and Yates 的原始版</h2><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/37/Biologist_and_statistician_Ronald_Fisher.jpg/189px-Biologist_and_statistician_Ronald_Fisher.jpg" alt=""></p><p>Fisher–Yates shuffle 的原始版本，最初描述在 1938 年的 Ronald Fisher（上图） 和 Frank Yates 写的书中，书名为《Statistical tables for biological, agricultural and medical research》。他们使用纸和笔去描述了这个算法，并使用了一个随机数表来提供随机数。它给出了 1 到 N 的数字的的随机排列，具体步骤如下：</p><ol><li>写下从 1 到 N 的数字</li><li>取一个从 1 到剩下的数字（包括这个数字）的随机数 k</li><li>从低位开始，得到第 k 个数字（这个数字还没有被取出），把它写在独立的一个列表的最后一位</li><li>重复第 2 步，直到所有的数字都被取出</li><li>第 3 步写出的这个序列，现在就是原始数字的随机排列</li></ol><p>已经证明如果第 2 步取出的数字是真随机的，那么最后得到的排序一定也是。</p><h2 id="现代方法"><a href="#现代方法" class="headerlink" title="现代方法"></a>现代方法</h2><p>Fisher–Yates shuffle 算法的现代版本是为计算机设计的。由 Richard Durstenfeld 在1964年 描述。并且是被 Donald E. Knuth 在 《The Art of Computer Programming》 中推广。但是不管是 Durstenfeld 还是 Knuth，都没有在书的第一版中承认这个算法是 Fisher 和 Yates 的研究成果。也许他们并不知道。不过后来出版的 《The Art of Computer Programming》提到了 Fisher 和 Yates 贡献。</p><p>现代版本的描述与原始略有不同，因为如果按照原始方法，愚蠢的计算机会花很多无用的时间去计算上述第 3 步的剩余数字。<strong>这里的方法是在每次迭代时交换这个被取出的数字到原始列表的最后</strong>。这样就将时间复杂度从 O(n^2) 减小到了 <strong>O(n)</strong>。算法的伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- To shuffle an array a of n elements (indices 0..n-1):</span><br><span class="line">for i from n−1 downto 1 do</span><br><span class="line">     j ← random integer such that 0 ≤ j ≤ i</span><br><span class="line">     exchange a[j] and a[i]</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="迭代步骤演示"><a href="#迭代步骤演示" class="headerlink" title="迭代步骤演示"></a>迭代步骤演示</h3><p>根据每次迭代次数可以用下面的表格，描述这个算法的执行过程</p><table><thead><tr><th style="text-align:left">随机数取值范围</th><th style="text-align:left">随机数</th><th style="text-align:right">原始数据</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:right">1 2 3 4 5 6 7 8</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">1-8</td><td style="text-align:left">6</td><td style="text-align:right">1 2 3 4 5 7 8</td><td style="text-align:left">6</td></tr><tr><td style="text-align:left">1-7</td><td style="text-align:left">2</td><td style="text-align:right">1 7 3 4 5 8</td><td style="text-align:left">2 6</td></tr><tr><td style="text-align:left">1–6</td><td style="text-align:left">6</td><td style="text-align:right">1 7 3 4 5</td><td style="text-align:left">8 2 6</td></tr><tr><td style="text-align:left">1–5</td><td style="text-align:left">1</td><td style="text-align:right">5 7 3 4</td><td style="text-align:left">1 8 2 6</td></tr><tr><td style="text-align:left">1–4</td><td style="text-align:left">3</td><td style="text-align:right">5 7 4</td><td style="text-align:left">3 1 8 2 6</td></tr><tr><td style="text-align:left">1–3</td><td style="text-align:left">3</td><td style="text-align:right">5 7</td><td style="text-align:left">4 3 1 8 2 6</td></tr><tr><td style="text-align:left">1–2</td><td style="text-align:left">1</td><td style="text-align:right">7</td><td style="text-align:left">5 4 3 1 8 2 6</td></tr></tbody></table><h3 id="动画演示"><a href="#动画演示" class="headerlink" title="动画演示"></a>动画演示</h3><p>下面这个动画就是整个数组 0-19 的随机排序过程</p><iframe height="317" scrolling="no" src="//codepen.io/haoyang/embed/jrvrQq/?height=317&theme-id=dark&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/haoyang/pen/jrvrQq/" target="_blank" rel="noopener">Fisher–Yates shuffle</a> by Chuan shi (<a href="http://codepen.io/haoyang" target="_blank" rel="noopener">@haoyang</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><h2 id="JavaScript-代码实现"><a href="#JavaScript-代码实现" class="headerlink" title="JavaScript 代码实现"></a>JavaScript 代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Fisher–Yates shuffle</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.shuffle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> input = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = input.length<span class="number">-1</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> randomIndex = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*(i+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">var</span> itemAtIndex = input[randomIndex];</span><br><span class="line"></span><br><span class="line">        input[randomIndex] = input[i];</span><br><span class="line">        input[i] = itemAtIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式也很简单，直接用数组调用这个方法即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>].shuffle()</span><br><span class="line"></span><br><span class="line"><span class="comment">//[4, 6, 3, 2, 5, 1, 7, 8] // 每次结果都是随机的</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总之，Fisher–Yates shuffle 算法是一个非常高效又公平的随机排序算法，如果有随机排序数组的需求，用这个就对了！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle" target="_blank" rel="noopener">Fisher–Yates shuffle From Wikipedia</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单来说 Fisher–Yates shuffle 算法是一个用来将一个有限集合生成一个随机排列的算法（数组随机排序）。这个算法生成的随机排列是等概率的。同时这个算法非常高效。&lt;/p&gt;
&lt;p&gt;本文主要介绍这个算法的来源、演变、原理。并举出一个例子为大家清晰的描述每次迭代过程
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://fjluda.github.io/categories/JavaScript/"/>
    
    
      <category term="算法" scheme="https://fjluda.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="shuffle" scheme="https://fjluda.github.io/tags/shuffle/"/>
    
      <category term="乱序" scheme="https://fjluda.github.io/tags/%E4%B9%B1%E5%BA%8F/"/>
    
      <category term="洗牌" scheme="https://fjluda.github.io/tags/%E6%B4%97%E7%89%8C/"/>
    
  </entry>
  
  <entry>
    <title>Git 如何 clone 非 master 分支的代码</title>
    <link href="https://fjluda.github.io/2018/03/30/2016-07-07-git-clone-not-master-branch/"/>
    <id>https://fjluda.github.io/2018/03/30/2016-07-07-git-clone-not-master-branch/</id>
    <published>2018-03-30T01:15:16.121Z</published>
    <updated>2018-04-02T23:50:14.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>我们每次使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@gitlab.xxx.com:xxxxx.git</span><br></pre></td></tr></table></figure><p>默认 clone 的是这个仓库的 master 分支。如果最新的代码不在 master 分支上，该如何拿到呢？如下图所示，最新的代码可能在<code>daily/1.4.1</code>分支上，我们希望拿到这个分支上的代码。</p><p><img src="https://ooo.0o0.ooo/2016/07/07/577e349ab42ed.png" alt="7f07c8f6deef169ef6be5103bbd3e932f8676bb1.png"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><strong>刚刚开周会的时候，自己洋洋得意的分享我的解决方案，但是……经过与团队成员的的讨论，自己的方法弱爆了，现在把更优雅的方法写一下。原来写的方法并不太适合用在这个场景里。</strong> 我之前写的方法在文章后面。</p><p>直接使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r #查看远程分支</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a #查看所有分支</span><br></pre></td></tr></table></figure><p>会显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">origin/HEAD -&gt; origin/master</span><br><span class="line">origin/daily/1.2.2</span><br><span class="line">origin/daily/1.3.0</span><br><span class="line">origin/daily/1.4.1</span><br><span class="line">origin/develop</span><br><span class="line">origin/feature/daily-1.0.0</span><br><span class="line">origin/master</span><br></pre></td></tr></table></figure><p>然后直接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout origin/daily/1.4.1</span><br></pre></td></tr></table></figure><p>就好了。。。</p><h2 id="原来的解决方案"><a href="#原来的解决方案" class="headerlink" title="原来的解决方案"></a>原来的解决方案</h2><p><strong>其实我原来写的这个方法更多的是：设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支。</strong></p><p>我们在本地先建立一个分支，建议名称和远程的想要同步的分支名称一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch daily/1.4.1</span><br></pre></td></tr></table></figure><p>在切换到这个本地分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout daily/1.4.1</span><br><span class="line"># Switched to branch &apos;daily/1.4.1&apos;</span><br></pre></td></tr></table></figure><p>接下来就可以去建立上游分支的关联了，但是这个命令比较长，不好记，我们可以直接先<code>pull</code>一下，git 会提示我们相应的操作和命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line">There is no tracking information for the current branch.</span><br><span class="line">Please specify which branch you want to merge with.</span><br><span class="line">See git-pull(1) for details.</span><br><span class="line"></span><br><span class="line">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">If you wish to set tracking information for this branch you can do so with:</span><br><span class="line"></span><br><span class="line">    git branch --set-upstream-to=origin/&lt;branch&gt; daily/1.4.1</span><br></pre></td></tr></table></figure><p>我们看到最后一行，执行这个命令，即可完成与上游分支的关联。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/daily/1.4.1 daily/1.4.1</span><br><span class="line"># Branch daily/1.4.1 set up to track remote branch daily/1.4.1 from origin.</span><br></pre></td></tr></table></figure><p>然后再<code>pull</code>一下就好了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;我们每次使用命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="GitHub" scheme="https://fjluda.github.io/categories/GitHub/"/>
    
    
      <category term="GitHub" scheme="https://fjluda.github.io/tags/GitHub/"/>
    
      <category term="Git" scheme="https://fjluda.github.io/tags/Git/"/>
    
      <category term="分支" scheme="https://fjluda.github.io/tags/%E5%88%86%E6%94%AF/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 babel</title>
    <link href="https://fjluda.github.io/2018/03/30/2016-06-14-how-to-use-babel/"/>
    <id>https://fjluda.github.io/2018/03/30/2016-06-14-how-to-use-babel/</id>
    <published>2018-03-30T00:50:23.543Z</published>
    <updated>2018-04-03T00:08:44.541Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://babeljs.io/" target="_blank" rel="noopener">Babel</a> 用于将 ES6 的代码转化为 ES5，使得 ES6 可以在目前的浏览器环境下使用。学习使用 babel 是为了使用 ES2015 做准备。本文将介绍如何使用 babel，以及一些相关的配置。</p><p><img src="https://babeljs.io/images/logo.svg" alt=""></p><p>学习 Babel 可以通过其手册 Babel handbook。</p><ul><li><a href="https://github.com/thejameskyle/babel-handbook" target="_blank" rel="noopener">babel-handbook</a></li></ul><p>其中包含多语言版本，分为<a href="https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/user-handbook.md" target="_blank" rel="noopener">用户手册</a>和<a href="https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md" target="_blank" rel="noopener">插件手册</a>。这是一个很好的学习 Babel 的资料。</p><h2 id="babel-cli"><a href="#babel-cli" class="headerlink" title="babel-cli"></a>babel-cli</h2><p>在 node 和 npm 环境安装好的前提下，安装 babel，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global babel-cli</span><br></pre></td></tr></table></figure><p>安装完成后就可以编译文件了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel main.js</span><br></pre></td></tr></table></figure><p>编译后的文件显示在终端上，可以添加其他命令让它输出到指定文件下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">babel example.js --out-file compiled.js</span><br><span class="line">或</span><br><span class="line">babel example.js -o compiled.js</span><br></pre></td></tr></table></figure><p>或将整个目录编译成一个新的目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">babel src --out-dir lib</span><br><span class="line">或</span><br><span class="line">babel src -d lib</span><br></pre></td></tr></table></figure><p>但这很麻烦，并且并不是一个很好的解决方案，请看下一节项目内运行 babel-cli。</p><h2 id="在项目内运行-babel-cli"><a href="#在项目内运行-babel-cli" class="headerlink" title="在项目内运行 babel-cli"></a>在项目内运行 babel-cli</h2><p>初始化项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>再安装 babel-cli</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure><p>项目中的<code>package.json</code>应该包含如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"learn-es6"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-cli"</span>: <span class="string">"^6.10.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加 npm scripts 命令。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "name": "learn-es6",</span><br><span class="line">  "version": "1.0.0",</span><br><span class="line"><span class="addition">+   "scripts": &#123;</span></span><br><span class="line"><span class="addition">+     "build": "babel src -d lib"</span></span><br><span class="line"><span class="addition">+   &#125;,</span></span><br><span class="line">  "devDependencies": &#123;</span><br><span class="line">    "babel-cli": "^6.10.1"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时在终端里运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>还不能成功编译，因为没有配置<code>.babelrc</code>文件。</p><h2 id="配置-babelrc"><a href="#配置-babelrc" class="headerlink" title="配置.babelrc"></a>配置<code>.babelrc</code></h2><p>通过配置<code>.babelrc</code>来告诉 babel 来做什么。</p><p>在项目的根路径下创建<code>.babelrc</code>文件。然后输入以下内容作为开始：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [],</span><br><span class="line">    <span class="attr">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了让 babel 将 ES2015 转化为 ES5，我们要安装如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-preset-es2015</span><br></pre></td></tr></table></figure><p>安装完成后在<code>.babelrc</code>中添加参数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "presets": [</span><br><span class="line"><span class="addition">+       "es2015"</span></span><br><span class="line">    ],</span><br><span class="line">    "plugins": []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在在项目<code>src/main.js</code>中写一些 ES2015 的代码试试吧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>在终端中输入命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>执行后终端中显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; learn-es6@1.0.0 build c:\gitWorkSpace\learn-es6</span><br><span class="line">&gt; babel src -d lib</span><br></pre></td></tr></table></figure><p>然后可以看到目录中出现了<code>lib/main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>即编译成功。</p><h2 id="配置-jshintrc"><a href="#配置-jshintrc" class="headerlink" title="配置.jshintrc"></a>配置<code>.jshintrc</code></h2><p>若编辑器中安装了 jshint 语法检查的插件。默认对于 ES2015 的代码可能会报错或者警告，看着可能会不爽。我们可以在配置文件中将它设置为允许 ES2015 的模式。</p><p>在项目根目录下创建文件<code>.jshintrc</code>。内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"asi"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"esversion"</span>: <span class="number">2015</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述文件我分别设置了，使用无分号模式，es 版本使用 2015。</p><p>关于<code>.jshintrc</code>的更详细配置可以参见官方示例：<a href="https://github.com/jshint/jshint/blob/master/examples/.jshintrc" target="_blank" rel="noopener">https://github.com/jshint/jshint/blob/master/examples/.jshintrc</a></p><p>好，babel 就说到这里，下面开始进入真正的 ES2015 的学习！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://babeljs.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Babel&lt;/a&gt; 用于将 ES6 的代码转化为 ES5，使得 ES6 可以在目前的浏览器环境下使用。学习使用 babel 是为了使用 ES2015 做
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://fjluda.github.io/categories/JavaScript/"/>
    
    
      <category term="ES2015" scheme="https://fjluda.github.io/tags/ES2015/"/>
    
      <category term="ES6" scheme="https://fjluda.github.io/tags/ES6/"/>
    
      <category term="ES5" scheme="https://fjluda.github.io/tags/ES5/"/>
    
      <category term="babel" scheme="https://fjluda.github.io/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 语言精粹笔记3-方法、毒瘤等</title>
    <link href="https://fjluda.github.io/2018/03/30/2016-06-10-JavaScript-good-parts-note3/"/>
    <id>https://fjluda.github.io/2018/03/30/2016-06-10-JavaScript-good-parts-note3/</id>
    <published>2018-03-30T00:50:23.543Z</published>
    <updated>2018-04-03T00:12:35.498Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下阅读蝴蝶书的笔记，本篇为书中最后一部分：方法、代码风格、优美的特性、毒瘤、糟粕等。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>这一章主要介绍了一些方法集。这里写几个我不太熟悉的方法和要点吧。</p><ul><li><p><code>array.join()</code></p><blockquote><p>对于IE6/7，使用<code>array.join()</code>连接大量字符串的效率确实优于使用<code>+</code>元素运算符。但是目前主流的浏览器，包括IE8以后的版本，都对<code>+</code>元素运算符连接字符串做了特别优化，性能已经显著高于<code>array.join()</code>。</p></blockquote></li><li><p><code>number.toExponential(fractionDigits)</code></p><p>  把这个<code>number</code>转换成一个指数形式的字符串。</p></li><li><p><code>number.toFixed(fractionDigits)</code></p><p>  将这个<code>number</code>转换成一个十进制形式的字符串。</p></li></ul><h2 id="毒瘤"><a href="#毒瘤" class="headerlink" title="毒瘤"></a>毒瘤</h2><ul><li><p>注意全局变量的引入。</p></li><li><p>JavaScript 中 Unicode 是16位的。包含65536个字符（基本多文种平面 Basic Multilingual Plane）。剩下的百万字符中的每一个都可以用一对字符来表示。Unicode 把一对字符视为一个单一的字符，而 JavaScript 认为一对字符是两个不同的字符。</p></li><li><p>检测<code>null</code>的方式。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>) <span class="comment">//object</span></span><br><span class="line"></span><br><span class="line">myValue === <span class="literal">null</span> <span class="comment">//检测 null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (myValue &amp;&amp; <span class="keyword">typeof</span> myValue === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="comment">// myValue 是一个对象或数组！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>parseInt</code> 把字符串转化为整数的函数。它遇到非数字时会停止解析，所以<code>parseInt(&#39;16&#39;)</code>和<code>parseInt(&#39;16ton&#39;)</code>产生相同的结果。</p><p>  如果该字符串第一个字符是0，那么该字符串会基于八进制而不是十进制来求职。在八进制中，8和9不是数字，所以<code>parseInt(&#39;08&#39;)</code>和<code>parseInt(&#39;09&#39;)</code>都产生0作为结果。但<code>parseInt()</code>可以接受基数，因此<code>parseInt(&#39;08&#39;,10)</code>结果为8，建议总是加上这个基数参数。</p></li><li><p>JavaScript 的对象永远不会是真的空对象，因为它们可以送原型链中取得成员属性。</p></li></ul><h2 id="糟粕"><a href="#糟粕" class="headerlink" title="糟粕"></a>糟粕</h2><ul><li><p>避免使用<code>with</code>语句。</p></li><li><p>避免使用<code>eval</code>语句。</p></li><li><p><code>continue</code>可能会降低运算性能。</p></li><li><p>位运算符在 JavaScript 会非常慢。</p><p>  Java 里，位运算符处理的是整数。JavaScript 没有整数类型，它只有双精度的浮点数，因此，位运算符把它们的数字运算数先转换为整数，执行运算，在转换回去。JavaScript 的执行环境一般接触不到硬件，所以非常慢。</p></li><li><p>避免使用包装对象。<code>new Object</code>和<code>new Array</code>等。</p></li><li><p>避免使用<code>void</code>。</p></li></ul><p>本系列结束。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一下阅读蝴蝶书的笔记，本篇为书中最后一部分：方法、代码风格、优美的特性、毒瘤、糟粕等。&lt;/p&gt;
&lt;h2 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h2&gt;&lt;p&gt;这一章主要介绍了一些方法集。这里写
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://fjluda.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://fjluda.github.io/tags/JavaScript/"/>
    
      <category term="函数" scheme="https://fjluda.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 语言精粹笔记2-继承、数组、正则表达式</title>
    <link href="https://fjluda.github.io/2018/03/30/2016-06-08-JavaScript-good-parts-note2/"/>
    <id>https://fjluda.github.io/2018/03/30/2016-06-08-JavaScript-good-parts-note2/</id>
    <published>2018-03-30T00:50:23.542Z</published>
    <updated>2018-04-03T00:08:38.831Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下阅读蝴蝶书的笔记，本篇为书中以下章节的笔记：继承、数组和正则表达式。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承的两大好处：代码重用，引入一套类型系统的规范。</p><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><p>JavaScript 通过构造器函数产生对象。</p><p>构造器调用模式，即用<code>new</code>前缀去调用一个函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Mammal = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mammal.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mammal.prototype.says = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.saying || <span class="string">''</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myMammal = <span class="keyword">new</span> Mammal(<span class="string">'Herb'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(myMammal.getName()) <span class="comment">//Herb</span></span><br></pre></td></tr></table></figure><p>书中不推荐这样的写法。有很多风险。若忘记添加<code>new</code>前缀，<code>this</code>无法绑定到新的对象上。而是绑定到了全局对象上，破坏了全局变量环境。</p><h3 id="对象说明符"><a href="#对象说明符" class="headerlink" title="对象说明符"></a>对象说明符</h3><p>上一节中的构造器可能要接受一大串参数。我们可以这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = Maker(&#123;</span><br><span class="line">    first: f,</span><br><span class="line">    middle: m,</span><br><span class="line">    last: l,</span><br><span class="line">    state: s,</span><br><span class="line">    city: c</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>将JSON对象传递给构造器，而它返回一个构造完全的对象。</p><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>在一个纯粹的原型模式中，我们将摒弃类，转而专注于对象。一个新对象可以继承一个就对象的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myMammal = &#123;</span><br><span class="line">    name: <span class="string">'MM'</span>,</span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">    &#125;,</span><br><span class="line">    says: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.saying || <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myCat = <span class="built_in">Object</span>.create(myMammal)</span><br><span class="line">myCat.name = <span class="string">'Kitty'</span></span><br><span class="line">myCat.saying = <span class="string">'meow'</span></span><br><span class="line">myCat.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Kitty is running'</span></span><br><span class="line">&#125;</span><br><span class="line">myCat.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.says + <span class="string">' '</span> + <span class="keyword">this</span>.name + <span class="string">' '</span> + <span class="keyword">this</span>.says</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一种差异化继承。</p><h3 id="函数化"><a href="#函数化" class="headerlink" title="函数化"></a>函数化</h3><p>前文看到的继承模式没法保护隐私。对象的所有属性都是可见的。无法得到私有变量和私有函数。为了解决这一问题，我们有模块模式。</p><p>构造一个生成对象的函数需要4步骤：</p><ol><li>创建一个新对象。</li><li>有选择的定义私有变量和方法。</li><li>给这个新对象扩充方法。</li><li>返回那个新对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mammal = <span class="function"><span class="keyword">function</span>(<span class="params">spec</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    that.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> spec.name</span><br><span class="line">    &#125;</span><br><span class="line">    that.says = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> spec.saying || <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> that</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myMammal = mammal(&#123;</span><br><span class="line">    name: <span class="string">'Herb'</span>,</span><br><span class="line">    saying: <span class="string">'Cheers!'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myMammal.getName()) <span class="comment">//Herb</span></span><br><span class="line"><span class="built_in">console</span>.log(myMammal.says()) <span class="comment">//Cheers!</span></span><br></pre></td></tr></table></figure><p>也可以参考上一篇文章，<a href="http://gaohaoyang.github.io/2016/06/07/JavaScript-good-parts-note1/#section-34" target="_blank" rel="noopener">JavaScript 语言精粹笔记1-语法、对象、函数 之模块部分</a>。</p><h3 id="部件"><a href="#部件" class="headerlink" title="部件"></a>部件</h3><p>这一部分看的不是特别懂，我想等我学完ES2015中的类和模块部分后再看看吧。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组字面量"><a href="#数组字面量" class="headerlink" title="数组字面量"></a>数组字面量</h3><p>一个数组字面量是在一对方括号中包围零个或多个用逗号分隔的值的表达式。</p><p>再大多数语言中，一个数组的多有元素都要求是相同的类型。JavaScript 允许数组包含任意混合类型的值。</p><h3 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h3><p>JavaScript 数组的<code>length</code>属性是没有上界的。如果用大于或等于当前<code>length</code>的数字作为下标来存储一个元素，那么<code>length</code>值会被增大以容纳新元素，不会发生数组越界错误。</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>数组也是对象，可以用<code>delete</code>来删除元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="number">3</span>, <span class="string">'four'</span>, <span class="string">'wu'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> numbers[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">console</span>.log(numbers[<span class="number">0</span>]) <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(numbers.length) <span class="comment">//5</span></span><br></pre></td></tr></table></figure><p>可以使用<code>splice</code>方法，进行删除和修改操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numbers.splice(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(numbers[<span class="number">0</span>]) <span class="comment">//two</span></span><br><span class="line"><span class="built_in">console</span>.log(numbers.length) <span class="comment">//4</span></span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>使用常规<code>for</code>循环即可，可以保证数组的顺序。</p><h3 id="容易混淆的地方"><a href="#容易混淆的地方" class="headerlink" title="容易混淆的地方"></a>容易混淆的地方</h3><p>当属性名是小而连续的整数时，应该使用数组，否则使用对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> [<span class="number">1</span>, <span class="number">2</span>]) <span class="comment">//object</span></span><br></pre></td></tr></table></figure><p>返回数组的类型是<code>object</code>，没有任何意义。</p><p>判断数组类型的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(numbers)) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>ECMAScript 5.1 (ECMA-262) 和 ECMAScript 2015 (6th Edition, ECMA-262) 标准中的方法。</p><p>或者下面这个方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> is_array = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.apply(value) === <span class="string">'[object Array]'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(is_array(numbers)) <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>数组的方法被存储在<code>Array.prototype</code>中的函数。</p><p>数组是对象，因此<code>Array.prototype</code>也是可扩充的。</p><h3 id="指定初始值"><a href="#指定初始值" class="headerlink" title="指定初始值"></a>指定初始值</h3><p>JavaScript 的数组不会预制值。</p><p>JavaScript 没有多维数组，单项大多数类 C 语言一样，支持元素为数组的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> matrix = [</span><br><span class="line">    [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">]</span><br><span class="line"><span class="built_in">console</span>.log(matrix[<span class="number">1</span>][<span class="number">2</span>]) <span class="comment">//6</span></span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>关于正则表达式，以前的博文写的比较多了，详情见：</p><p><a href="http://gaohaoyang.github.io/2015/04/22/baidu-ife-2-javascript/#section-10" target="_blank" rel="noopener">百度Web前端技术学院(2)-JavaScript 基础 之正则表达式部分1</a></p><p><a href="http://gaohaoyang.github.io/2015/04/22/baidu-ife-2-javascript/#section-12" target="_blank" rel="noopener">百度Web前端技术学院(2)-JavaScript 基础 之正则表达式部分2</a></p><p><a href="http://gaohaoyang.github.io/2016/05/06/regular-expression-group/" target="_blank" rel="noopener">浅谈正则表达式中的分组和引用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一下阅读蝴蝶书的笔记，本篇为书中以下章节的笔记：继承、数组和正则表达式。&lt;/p&gt;
&lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;p&gt;继承的两大好处：代码重用，引入一套类型系统的规范
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://fjluda.github.io/categories/JavaScript/"/>
    
    
      <category term="Array" scheme="https://fjluda.github.io/tags/Array/"/>
    
      <category term="正则" scheme="https://fjluda.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="对象" scheme="https://fjluda.github.io/tags/%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="继承" scheme="https://fjluda.github.io/tags/%E7%BB%A7%E6%89%BF/"/>
    
      <category term="原型" scheme="https://fjluda.github.io/tags/%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 语言精粹笔记1-语法、对象、函数</title>
    <link href="https://fjluda.github.io/2018/03/30/2016-06-07-JavaScript-good-parts-note1/"/>
    <id>https://fjluda.github.io/2018/03/30/2016-06-07-JavaScript-good-parts-note1/</id>
    <published>2018-03-30T00:50:23.541Z</published>
    <updated>2018-04-03T00:12:32.532Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下阅读蝴蝶书的笔记，本篇为第一部分包含书中前三章内容：语法、对象和函数。</p><p><img src="https://img3.doubanio.com/lpic/s3651235.jpg" alt=""></p><p>原书中第一章为精华，做了一些周边介绍，略去。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="空白"><a href="#空白" class="headerlink" title="空白"></a>空白</h3><p>这里说一下JavaScript的注释，一种是 <code>/* */</code> 包围的块注释，另一种是 <code>//</code> 开头的行注释。</p><p>因为块注释的字符可能是JavaScript中正则表达式字面量，因此不是很安全，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    var rm_a = /a*/</span>.match(s)</span><br><span class="line">*<span class="regexp">/</span></span><br></pre></td></tr></table></figure><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>标识符由一个字母开头，后面可选择性的加上一个或多个字母、数字或下划线。要避免保留字。</p><p>标识符被用于语句、变量、参数、属性名、运算符和标记。</p><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>可以存在指数部分，100和1e2完全相等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span> === <span class="number">1e2</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>使用<code>isNaN</code>来检测<code>NaN</code>。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>当年 JavaScript 被创建的时候，Unicode 是16位字符集，因此 JavaScript 字符串是16位的。</p><p>用双引号或单引号包裹。</p><p>重点说一下转义字符<code>\</code></p><p>反斜杠后面可以跟<code>&quot;</code>, <code>&#39;</code>, <code>\</code>, <code>/</code>, <code>b</code> (backspace), <code>f</code> (formfeed), <code>n</code>, <code>r</code> (carriage return), <code>t</code>, <code>u1234</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'A'</span> === <span class="string">'\u0041'</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>每个<code>&lt;script&gt;</code>标签的内容被一起抛到一个公共的全局名字空间中。</p><p><code>{...}</code>代码块不会创建新的作用域，因此变量应该被定义在函数的头部，而不是在代码块中。</p><p>下列值当做假：</p><ul><li><code>false</code></li><li><code>null</code></li><li><code>undefined</code></li><li><code>&#39;&#39;</code></li><li><code>0</code></li><li><code>NaN</code></li></ul><p>其他所有值都当做真</p><p><code>for in</code>语句枚举对象的所有属性名（键名），使用<code>object.hasOwnProperty(variable)</code>来确定这个属性名是该对象成员，还是来自原型链。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (myvar <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(myvar)) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>运算符优先级</p><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td><code>.</code> <code>[]</code> <code>()</code></td><td>提取属性与调用函数</td></tr><tr><td><code>delete</code> <code>new</code> <code>typeof</code> <code>+</code> <code>-</code> <code>!</code></td><td>一元运算符</td></tr><tr><td><code>*</code> <code>/</code> <code>%</code></td><td></td></tr><tr><td><code>+</code> <code>-</code></td><td></td></tr><tr><td><code>&gt;=</code> <code>&lt;=</code> <code>&gt;</code> <code>&lt;</code></td><td></td></tr><tr><td><code>===</code> <code>!==</code></td><td></td></tr><tr><td><code>&amp;&amp;</code></td><td>逻辑与</td></tr><tr><td>`</td><td></td><td>`</td><td>逻辑或</td></tr><tr><td><code>?:</code></td><td>三目</td></tr></tbody></table><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>对象字面量是一种可以方便地按指定规格创建新对象的表示法。</p><p>数组字面量是一种可以方便地按指定规格创建新数组的表示法。</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数字面量定义了函数值。后续章节详谈。</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对象是属性的容器，每一个属性都拥有名字和值。属性的名字可以是包含空字符串在内的任意字符串。属性的值可以是除<code>undefined</code>值之外的任何值。</p><p>JavaScript 包含一种原型链的特性，允许对象继承另一个对象的属性。正确地使用它能减少对象初始化时消耗的时间和内存。</p><h3 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h3><p>一个对象字面量就是包围在一对花括号中的零或多个“名/值”对。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> empty_object = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stooge = &#123;</span><br><span class="line">    firstName: <span class="string">'Haoyang'</span>,</span><br><span class="line">    lastName: <span class="string">'Gao'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="检索"><a href="#检索" class="headerlink" title="检索"></a>检索</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(stooge.firstName); <span class="comment">// Haoyang</span></span><br><span class="line"><span class="built_in">console</span>.log(stooge[<span class="string">'firstName'</span>]); <span class="comment">// Haoyang</span></span><br></pre></td></tr></table></figure><p>不存在的属性返回<code>undefined</code>。</p><p>使用<code>||</code>来填充默认值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(stooge.firstName || <span class="string">'Joe'</span>); <span class="comment">// Haoyang</span></span><br><span class="line"><span class="built_in">console</span>.log(stooge.age || <span class="number">25</span>); <span class="comment">// 25</span></span><br></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>直接使用赋值语句更新，若不存在这个属性，则作为扩充操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stooge.firstName = <span class="string">'aaa'</span></span><br><span class="line">stooge.nickName = <span class="string">'peip'</span></span><br><span class="line"><span class="built_in">console</span>.log(stooge) <span class="comment">//Object &#123;firstName: "aaa", lastName: "Gao", nickName: "peip"&#125;</span></span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>对象通过引用来传递他们永远不会被复制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = stooge</span><br><span class="line">x.hair = <span class="string">'black'</span></span><br><span class="line">stooge.hair <span class="comment">//"black"</span></span><br></pre></td></tr></table></figure><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>每一个对象都连接到一个原型对象，并且它可以从中继承属性。所有通过字面量创建的对象都连接到<code>Object.prototype</code>，它是JavaScript中的标配对象。</p><p>可以使用<code>Object.create()</code>方法创建一个使用原对象作为其原型的新对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anotherStooge = <span class="built_in">Object</span>.create(stooge)</span><br><span class="line">anotherStooge.firstName <span class="comment">//"aaa"</span></span><br><span class="line">anotherStooge.firstName = <span class="string">'bbb'</span></span><br><span class="line">anotherStooge.firstName <span class="comment">//"bbb"</span></span><br><span class="line">anotherStooge.hair <span class="comment">//"black"</span></span><br></pre></td></tr></table></figure><p>新对象先查找自己的属性，若不存在则会向原型方向查找。</p><p><img src="http://ww1.sinaimg.cn/large/7011d6cfjw1f4ieu7focqj207h05caaf.jpg" alt=""></p><p>当我们对某个对象作出改变时，不会触及该对象的原型。</p><p>原型关系是一种动态关系。如果我们添加一个新的属性到原型中，该属性会立即对所有基于该原型创建的对象可见。</p><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>在计算机科学中，反射是指计算机程序在运行时（Run time）可以访问、检测和修改它本身状态或行为的一种能力。</p><p>检查对象并确定对象有什么属性是很容易的事情，只要试着去检索该属性并验证取得的值。</p><p><code>typeof</code>用来确定对象属性的类型。</p><p><code>hasOwnProperty</code>，若对象拥有独有的属性，它将返回<code>true</code>。不会检查原型链。</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>使用<code>for in</code>可以遍历一个对象中的所有属性名，包括原型链上的属性名。可以使用<code>hasOwnProperty</code>过滤原型链上的属性，使用<code>typeof</code>来排除函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> anotherStooge) &#123;</span><br><span class="line">    <span class="keyword">if</span> (anotherStooge.hasOwnProperty(name) &amp;&amp; <span class="keyword">typeof</span> anotherStooge[name] !== <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name + <span class="string">'---&gt;'</span> + anotherStooge[name])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// firstName---&gt;bbb</span></span><br></pre></td></tr></table></figure><p>属性名是无序的，若想保持顺序应使用数组和<code>for</code>循环。</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><code>delete</code>可以用来删除对象的属性。若对象包含该属性，则会被移除。它不会触及原型链中的任何对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">anotherStooge.firstName <span class="comment">//"bbb"</span></span><br><span class="line"><span class="keyword">delete</span> anotherStooge.firstName</span><br><span class="line">anotherStooge.firstName <span class="comment">//"aaa"</span></span><br></pre></td></tr></table></figure><h3 id="减少全局变量污染"><a href="#减少全局变量污染" class="headerlink" title="减少全局变量污染"></a>减少全局变量污染</h3><p>JavaScript 可以随意的定义全局变量来容纳应用的所有资源。但这会削弱程序的灵活性，应避免使用全局变量。</p><p>最小化使用全局变量的方法之一是为应用只创建一个唯一的全局变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MYAPP = &#123;&#125;</span><br><span class="line"></span><br><span class="line">MYAPP.stooge = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MYAPP.flight = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下一章将使用闭包来进行信息隐藏，是另一种有效减少全局污染的方法。</p><h2 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h2><h3 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h3><p>JavaScript 中的函数就是对象。函数对象连接到<code>Function.prototype</code>（该原型对象本身连接到<code>Object.prototype</code>）。每个函数对象在创建时会附加两个隐藏属性：函数的上下文和实现函数行为的代码。</p><p>函数对象在创建时也随配有一个<code>prototype</code>属性。它的值是一个拥有<code>constructor</code>属性且值即为该函数对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/7011d6cfjw1f4lrei2b3pj208f06et95.jpg" alt=""></p><p>因为函数是对象，所以可以像任何其他的值一样被使用。函数可以保存在变量、对象和数组中。函数可以被当做参数传递给其他函数，函数也可以再返回函数。函数也可以拥有方法。</p><p>函数的与众不同之处在于可以被调用。</p><h3 id="函数字面量"><a href="#函数字面量" class="headerlink" title="函数字面量"></a>函数字面量</h3><p>函数对象通过函数字面量来创建。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数字面量包含4部分，分别是：保留字 function、函数名、参数、花括号中的语句。</p><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><p>调用一个函数会暂停当前函数的执行，传递控制权和参数给新函数。除了声明时定义的形式参数，还有两个附加参数：<code>this</code>和<code>arguments</code>。参数<code>this</code>在面向对象编程中非常重要，它的值取决于调用的模式。JavaScript中一共有4中调用模式：方法调用模式、函数调用模式、构造器调用模式、apply调用模式。</p><p>实参和形参个数不匹配时，不会有运行时错误。实参过多时，超出的实参被忽略。形参过多时，缺失的值被替换为<code>undefined</code>。</p><p>下面的内容也可以参考我以前的博文 <a href="http://gaohaoyang.github.io/2015/06/12/JavaScript-this/" target="_blank" rel="noopener">JavaScript 中的 this</a></p><h4 id="方法调用模式"><a href="#方法调用模式" class="headerlink" title="方法调用模式"></a>方法调用模式</h4><p>当一个函数被保存为对象的一个属性时，我们称它为一个方法。当一个方法被调用时，<code>this</code>被绑定到该对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    value: <span class="number">0</span>,</span><br><span class="line">    increment: <span class="function"><span class="keyword">function</span>(<span class="params">inc</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value += <span class="keyword">typeof</span> inc === <span class="string">'number'</span> ? inc : <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myObject.increment()</span><br><span class="line"><span class="built_in">console</span>.log(myObject.value) <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">myObject.increment(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(myObject.value) <span class="comment">//4</span></span><br></pre></td></tr></table></figure><h4 id="函数调用模式"><a href="#函数调用模式" class="headerlink" title="函数调用模式"></a>函数调用模式</h4><p>当一个函数并非一个对象的属性时，那么它就是被当做一个函数来调用的。</p><p>此时<code>this</code>被绑定到全局对象。即时是内部函数也会将<code>this</code>绑定到全局对象。</p><p>可以在函数内创建一个属性并赋值为<code>this</code>来解决这个问题。如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myObject.double = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">var</span> helper = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        that.value = add(that.value, that.value)</span><br><span class="line">    &#125;</span><br><span class="line">    helper()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myObject.double()</span><br><span class="line"><span class="built_in">console</span>.log(myObject.value) <span class="comment">//8</span></span><br></pre></td></tr></table></figure><h4 id="构造器调用模式"><a href="#构造器调用模式" class="headerlink" title="构造器调用模式"></a>构造器调用模式</h4><p>JavaScript是一门基于原型继承的语言。对象可以直接从其他对象继承属性。该语言是无类型的。</p><p>如果在一个函数前面带上<code>new</code>来调用，那么背地里将会创建一个连接到该函数的<code>prototype</code>成员的新对象，同时<code>this</code>会被绑定到那个新对象上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建构造器函数</span></span><br><span class="line"><span class="keyword">var</span> Quo = <span class="function"><span class="keyword">function</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.status = string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给Que的所有实例提供一个公共方法</span></span><br><span class="line">Quo.prototype.getStatus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.status</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">var</span> myQuo = <span class="keyword">new</span> Quo(<span class="string">'confused'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myQuo.getStatus()) <span class="comment">//confused</span></span><br></pre></td></tr></table></figure><p>书中不推荐这种形式的构造器函数，下一章有更好的解决方案。</p><h4 id="Apply-调用模式"><a href="#Apply-调用模式" class="headerlink" title="Apply 调用模式"></a>Apply 调用模式</h4><p><code>apply</code>方法让我们构建一个参数数组传递给调用函数。他也允许我们选择<code>this</code>的值。<code>apply</code>方法接受两个参数，第一个是要绑定给<code>this</code>的值，第二个是参数数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> sum = add.apply(<span class="literal">null</span>, arr)</span><br><span class="line"><span class="built_in">console</span>.log(sum) <span class="comment">//7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> statusObject = &#123;</span><br><span class="line">    status: <span class="string">'hello'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> status = Quo.prototype.getStatus.apply(statusObject)</span><br><span class="line"><span class="built_in">console</span>.log(status) <span class="comment">//hello</span></span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>当函数被调用时，会得到一个<code>arguments</code>数组。通过此参数可以访问所有它被调用时传递给它的参数列表，包括那些没有被分配给函数声明时定义的形参的多余参数。这使得编写一个无须指定参数个数的函数成为可能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i, sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        sum += <span class="built_in">arguments</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)) <span class="comment">//45</span></span><br></pre></td></tr></table></figure><p>因语言的设计错误，<code>arguments</code>并不是一个真正的数组。是一个“类似数组”的对象。有<code>length</code>属性，但没有任何数组的方法。</p><h3 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h3><p>函数执行时遇到关闭函数体的<code>}</code>时结束。然后把控制权交还给调用该函数的程序。</p><p><code>return</code>可以使函数提前返回，不在执行余下的语句。</p><p>函数总是会返回一个值，若没有指定，则返回<code>undefined</code>。</p><p>若函数调用时在前面加上了<code>new</code>前缀，且返回值不是一个对象的时候，则返回<code>this</code>（该新对象）。</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>异常是干扰程序的正常流畅的不寻常的事故。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add2 = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> a !== <span class="string">'number'</span> || <span class="keyword">typeof</span> b !== <span class="string">'number'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> &#123;</span><br><span class="line">            name: <span class="string">'TypeError'</span>,</span><br><span class="line">            message: <span class="string">'add needs numbers'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add2(<span class="number">2</span>, <span class="number">3</span>)) <span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(add2(<span class="string">'a'</span>, <span class="number">6</span>))</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/7011d6cfjw1f4mprafcvhj20ml00xjrj.jpg" alt=""></p><p><code>throw</code>语句中断函数的执行。抛出一个<code>exception</code>对象，该对象包含一个用来识别异常类型的<code>name</code>属性和一个描述性的<code>message</code>属性。也可以自定义其他属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> try_it = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        add2(<span class="string">'a'</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e.name + <span class="string">': '</span> + e.message)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">try_it() <span class="comment">//TypeError: add needs numbers</span></span><br></pre></td></tr></table></figure><p>如果在<code>try</code>代码块内抛出一个异常，控制权就会跳转到它的<code>catch</code>语句中。</p><h3 id="扩充类型的功能"><a href="#扩充类型的功能" class="headerlink" title="扩充类型的功能"></a>扩充类型的功能</h3><p>JavaScript 允许给语言的基本类型扩充功能。通过<code>Object.prototype</code>添加方法，可以让该方法对所有对象都适用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先添加方法使得该方法对所有函数可用</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.method = <span class="function"><span class="keyword">function</span>(<span class="params">name, func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.prototype[name] = func</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加一个取整方法</span></span><br><span class="line"><span class="built_in">Number</span>.method(<span class="string">'integer'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>[<span class="keyword">this</span> &lt; <span class="number">0</span> ? <span class="string">'ceil'</span> : <span class="string">'floor'</span>](<span class="keyword">this</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log((<span class="number">-10</span> / <span class="number">3</span>).integer()) <span class="comment">//-3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 trim()</span></span><br><span class="line"><span class="built_in">String</span>.method(<span class="string">'trim'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">''</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'  hello alibaba  '</span>.trim()) <span class="comment">//hello alibaba</span></span><br></pre></td></tr></table></figure><p>JavaScript 原型继承是动态的，因此新的方法立刻被赋予到所有的对象实例上，即使对象实例是在方法被增加之前就创建好了。</p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归函数就是会直接或者间接地调用自身的一种函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> walkTheDom = <span class="function"><span class="keyword">function</span> <span class="title">walk</span>(<span class="params">node, func</span>) </span>&#123;</span><br><span class="line">    func(node)</span><br><span class="line">    node = node.firstChild</span><br><span class="line">    <span class="keyword">while</span> (node) &#123;</span><br><span class="line">        walk(node, func)</span><br><span class="line">        node = node.nextSibling</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getElementsByAttribute = <span class="function"><span class="keyword">function</span>(<span class="params">att, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> results = []</span><br><span class="line">    walkTheDom(<span class="built_in">document</span>.body, <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> actual = node.nodeType === <span class="number">1</span> &amp;&amp; node.getAttribute(att)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> actual === <span class="string">'string'</span> &amp;&amp; (actual === value || <span class="keyword">typeof</span> value !== <span class="string">'string'</span>)) &#123;</span><br><span class="line">            results.push(node)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在知乎主页上操作</span></span><br><span class="line"><span class="built_in">console</span>.log(getElementsByAttribute(<span class="string">'data-za-module'</span>, <span class="string">'AnswerItem'</span>))</span><br><span class="line"><span class="comment">//得到下列数据</span></span><br><span class="line"><span class="comment">//[div.feed-content, div.feed-content, div.feed-content, div.feed-content, div.feed-content, div.feed-content, div.feed-content]</span></span><br></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>作用域控制着变量与参数的可见性及生命周期。它减少了名称冲突，并提供了自动内存管理。</p><p>无块级作用域。</p><p>有函数作用域。</p><p>建议在函数体的顶部声明函数中可能用到的所有变量。</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>作用域的好处是内部函数可以访问定义他们的外部函数的参数和变量（除了<code>this</code>和<code>arguments</code>）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> quo = <span class="function"><span class="keyword">function</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        get_status: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> status</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myQuo = quo(<span class="string">'amazed'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(myQuo.get_status()) <span class="comment">//amazed</span></span><br></pre></td></tr></table></figure><p>狭义的说，返回的那个对象即闭包，它里面的方法可以访问它被创建时所处的上下文环境。</p><p>避免在循环中创建函数，容易引起混淆。可以现在循环之外创建一个辅助函数，让辅助函数在返回一个绑定了当前<code>i</code>值的函数，这样就不会导致混淆了。</p><h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>将一个函数作为参数，一旦接收到响应，再调用这个函数。</p><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>可以用函数和闭包构造模块。</p><p>模块模式的一般形式是：一个定义了私有变量和函数的函数；利用闭包创建可以访问私有变量和函数的特权函数；最后返回这个特权函数，或者把他们保存到一个可访问到的地方。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numberCal = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> half = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n / <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> double = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> tribble = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n * <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        half: half,</span><br><span class="line">        double: double,</span><br><span class="line">        tribble: tribble</span><br><span class="line">    &#125;</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(numberCal.half(<span class="number">5</span>)) <span class="comment">//2.5</span></span><br><span class="line"><span class="built_in">console</span>.log(numberCal.half(<span class="number">6</span>)) <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(numberCal.double(<span class="number">7</span>)) <span class="comment">//14</span></span><br><span class="line"><span class="built_in">console</span>.log(numberCal.tribble(<span class="number">7</span>)) <span class="comment">//21</span></span><br></pre></td></tr></table></figure><h3 id="级联"><a href="#级联" class="headerlink" title="级联"></a>级联</h3><p>如果让方法返回<code>this</code>而不是默认的<code>undefined</code>，就可以启用级联，即连续调用。</p><h3 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h3><p>柯里化允许我们把函数与传递给它的参数相结合，产生出一个新的函数。</p><p>详情见以前的博文 <a href="http://gaohaoyang.github.io/2015/06/11/JavaScript-function/#bind--currying" target="_blank" rel="noopener">JavaScript 函数 -bind 与 currying</a>。</p><h3 id="记忆"><a href="#记忆" class="headerlink" title="记忆"></a>记忆</h3><p>函数可以将先前操作的结果记录在某个对象里，从而避免无谓的重复运算。这种优化被称为记忆（memoization）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一下阅读蝴蝶书的笔记，本篇为第一部分包含书中前三章内容：语法、对象和函数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img3.doubanio.com/lpic/s3651235.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;原书中第一章为精华，做了一些周边介绍，略
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://fjluda.github.io/categories/JavaScript/"/>
    
    
      <category term="作用域" scheme="https://fjluda.github.io/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
      <category term="函数" scheme="https://fjluda.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
      <category term="this" scheme="https://fjluda.github.io/tags/this/"/>
    
      <category term="闭包" scheme="https://fjluda.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
      <category term="面向对象" scheme="https://fjluda.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="对象" scheme="https://fjluda.github.io/tags/%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 语法和 MWeb 写作使用说明</title>
    <link href="https://fjluda.github.io/2018/03/29/2018-03-29-Markdown%20%E8%AF%AD%E6%B3%95%E5%92%8C%20MWeb%20%E5%86%99%E4%BD%9C%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>https://fjluda.github.io/2018/03/29/2018-03-29-Markdown 语法和 MWeb 写作使用说明/</id>
    <published>2018-03-29T11:06:05.000Z</published>
    <updated>2018-04-03T11:28:51.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Markdown-的设计哲学"><a href="#Markdown-的设计哲学" class="headerlink" title="Markdown 的设计哲学"></a>Markdown 的设计哲学</h2><blockquote><p>Markdown 的目標是實現「易讀易寫」。<br>不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。<br>Markdown 的語法有個==主要==的目的：用來作為一種網路內容的<em>寫作</em>用語言。</p></blockquote><a id="more"></a><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>四个及以上空格加回车。<br>如果不想打这么多空格，只要回车就为换行，请勾选：<code>Preferences</code> - <code>Themes</code> - <code>Translate newlines to &lt;br&gt; tags</code></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 项目一 无序列表 `* + 空格键`</span><br><span class="line">* 项目二</span><br><span class="line">* 项目二的子项目一 无序列表 `TAB + * + 空格键`</span><br><span class="line">* 项目二的子项目二</span><br></pre></td></tr></table></figure><p>在 MWeb 中的快捷键为： <code>Option + U</code><br>效果如下：</p><ul><li>项目一 无序列表 <code>* + 空格键</code></li><li>项目二<ul><li>项目二的子项目一 无序列表 <code>TAB + * + 空格键</code></li><li>项目二的子项目二</li></ul></li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 项目一 有序列表 `数字 + . + 空格键`</span><br><span class="line">2. 项目二 </span><br><span class="line">3. 项目三</span><br><span class="line">1. 项目三的子项目一 有序列表 `TAB + 数字 + . + 空格键`</span><br><span class="line">2. 项目三的子项目二</span><br></pre></td></tr></table></figure><p>效果如下：</p><ol><li>项目一 有序列表 <code>数字 + . + 空格键</code></li><li>项目二 </li><li>项目三<ol><li>项目三的子项目一 有序列表 <code>TAB + 数字 + . + 空格键</code></li><li>项目三的子项目二</li></ol></li></ol><h3 id="列表中嵌入代码块语法"><a href="#列表中嵌入代码块语法" class="headerlink" title="列表中嵌入代码块语法"></a>列表中嵌入代码块语法</h3><pre><code>1. 项目一 有序列表 `数字 + . + 空格键`    列表中嵌入代码块必须前后空一行，如这个写法    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(arg) &#123;</span><br><span class="line">    $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    其他文本。2. 项目二</code></pre><h3 id="任务列表（Task-lists）"><a href="#任务列表（Task-lists）" class="headerlink" title="任务列表（Task lists）"></a>任务列表（Task lists）</h3><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 任务一 未做任务 `- + 空格 + [ ]`</span><br><span class="line">- [x] 任务二 已做任务 `- + 空格 + [x]`</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li style="list-style: none"><input type="checkbox"> 任务一 未做任务 <code>- + 空格 + [ ]</code></li><li style="list-style: none"><input type="checkbox" checked> 任务二 已做任务 <code>- + 空格 + [x]</code></li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![GitHub set up](http://zh.mweb.im/asset/img/set-up-git.gif)</span><br><span class="line">格式: ![Alt Text](url)</span><br></pre></td></tr></table></figure><p><code>Control + Shift + I</code> 可插入Markdown语法。<br>如果是 MWeb 的文档库中的文档，还可以用拖放图片、<code>CMD + V</code> 粘贴、<code>CMD + Option + I</code> 导入这三种方式来增加图片。<br>效果如下：</p><p><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="GitHub set up"></p><p>MWeb 引入的特别的语法来设置图片宽度，方法是在图片描述后加 <code>-w + 图片宽度</code> 即可，比如说要设置上面的图片的宽度为 140，语法如为 <code>![GitHub-w140](set-up-git.gif)</code>：</p><p><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="GitHub set up-w140"></p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">email &lt;example@example.com&gt;</span><br><span class="line">[GitHub](http://github.com)</span><br><span class="line">自动生成连接  &lt;http://www.github.com/&gt;</span><br></pre></td></tr></table></figure><p><code>Control + Shift + L</code> 可插入Markdown语法。<br>如果是 MWeb 的文档库中的文档，拖放或<code>CMD + Option + I</code> 导入非图片时，会生成连接。<br>效果如下：</p><p>Email 连接： <a href="mailto:&#101;&#x78;&#97;&#109;&#112;&#x6c;&#x65;&#64;&#x65;&#x78;&#x61;&#109;&#112;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;" target="_blank" rel="noopener">&#101;&#x78;&#97;&#109;&#112;&#x6c;&#x65;&#64;&#x65;&#x78;&#x61;&#109;&#112;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;</a><br><a href="http://github.com" target="_blank" rel="noopener">连接标题Github网站</a><br>自动生成连接像： <a href="http://www.github.com/" target="_blank" rel="noopener">http://www.github.com/</a> 这样</p><h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">某某说:</span><br><span class="line">&gt; 第一行引用</span><br><span class="line">&gt; 第二行费用文字</span><br></pre></td></tr></table></figure><p><code>CMD + Shift + B</code> 可插入Markdown语法。<br>效果如下：</p><p>某某说:</p><blockquote><p>第一行引用<br>第二行费用文字</p></blockquote><h2 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">像这样即可：`&lt;addr&gt;` `code`</span><br></pre></td></tr></table></figure><p><code>CMD + K</code> 可插入Markdown语法。<br>效果如下：</p><p>像这样即可：<code>&lt;addr&gt;</code> <code>code</code></p><h2 id="多行或者一段代码"><a href="#多行或者一段代码" class="headerlink" title="多行或者一段代码"></a>多行或者一段代码</h2><p>Markdown 语法：</p><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(arg) &#123;</span><br><span class="line">    $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p><code>CMD + Shift + K</code> 可插入Markdown语法。<br>效果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(arg) &#123;</span><br><span class="line">$.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顺序图或流程图"><a href="#顺序图或流程图" class="headerlink" title="顺序图或流程图"></a>顺序图或流程图</h2><p>Markdown 语法：</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</span><br><span class="line">Note right of 李四: 李四愣了一下，说：</span><br><span class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;operation: 我的操作</span><br><span class="line">cond=&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure></code></pre><p>效果如下（ <code>Preferences</code> - <code>Themes</code> - <code>Enable sequence &amp; flow chart</code> 才会看到效果 ）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</span><br><span class="line">Note right of 李四: 李四愣了一下，说：</span><br><span class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;operation: 我的操作</span><br><span class="line">cond=&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><p>更多请参考：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">http://bramp.github.io/js-sequence-diagrams/</a>, <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">http://adrai.github.io/flowchart.js/</a></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一格表头 | 第二格表头</span><br><span class="line">--------- | -------------</span><br><span class="line">内容单元格 第一列第一格 | 内容单元格第二列第一格</span><br><span class="line">内容单元格 第一列第二格 多加文字 | 内容单元格第二列第二格</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th>第一格表头</th><th>第二格表头</th></tr></thead><tbody><tr><td>内容单元格 第一列第一格</td><td>内容单元格第二列第一格</td></tr><tr><td>内容单元格 第一列第二格 多加文字</td><td>内容单元格第二列第二格</td></tr></tbody></table><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>Markdown 语法：</p><pre><code>加删除线像这样用： ~~删除这些~~</code></pre><p>效果如下：</p><p>加删除线像这样用： <del>删除这些</del></p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>以下三种方式都可以生成分隔线：</p><pre><code>********- - -</code></pre><p>效果如下：</p><hr><hr><hr><h2 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">块级公式：</span><br><span class="line">$$x = \dfrac&#123;-b \pm \sqrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; $$</span><br><span class="line"></span><br><span class="line">\\[ \frac&#123;1&#125;&#123;\Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;\frac25 \pi&#125;&#125; =</span><br><span class="line">1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-6\pi&#125;&#125;</span><br><span class="line">&#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125; &#123;1+\ldots&#125; &#125; &#125; &#125; \\]</span><br><span class="line"></span><br><span class="line">行内公式： $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</span><br></pre></td></tr></table></figure><p>效果如下（<code>Preferences</code> - <code>Themes</code> - <code>Enable MathJax</code> 才会看到效果）：</p><p>块级公式：<br>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p><p>\[ \frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} =<br>1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}}<br>{1+\frac{e^{-8\pi}} {1+\ldots} } } } \]</p><p>行内公式： $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</p><h2 id="脚注（Footnote）"><a href="#脚注（Footnote）" class="headerlink" title="脚注（Footnote）"></a>脚注（Footnote）</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个脚注：[^sample_footnote]</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>这是一个脚注：<a href="这里是脚注信息">^s</a></p><h2 id="注释和阅读更多"><a href="#注释和阅读更多" class="headerlink" title="注释和阅读更多"></a>注释和阅读更多</h2><!-- comment --><!-- more --><p>Actions-&gt;Insert Read More Comment <em>或者</em> <code>Command + .</code><br><strong>注</strong> 阅读更多的功能只用在生成网站或博客时，插入时注意要后空一行。</p><h2 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[TOC]</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>[TOC]</p><h2 id="本文约定"><a href="#本文约定" class="headerlink" title="本文约定"></a>本文约定</h2><p>如果有写 <code>效果如下：</code>， 在 MWeb 编辑状态下只有用 <code>CMD + 4</code> 或 <code>CMD + R</code> 预览才可以看效果。<br>$$<br>$$</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 第一级标题 `&lt;h1&gt;` </span><br><span class="line">## 第二级标题 `&lt;h2&gt;` </span><br><span class="line">### 第三级标题 `&lt;h3&gt;` </span><br><span class="line">#### 第四级标题 `&lt;h4&gt;` </span><br><span class="line">##### 第五级标题 `&lt;h5&gt;` </span><br><span class="line">###### 第六级标题 `&lt;h6&gt;`</span><br></pre></td></tr></table></figure><p>效果如下：</p><h1 id="第一级标题-lt-h1-gt"><a href="#第一级标题-lt-h1-gt" class="headerlink" title="第一级标题 &lt;h1&gt;"></a>第一级标题 <code>&lt;h1&gt;</code></h1><h2 id="第二级标题-lt-h2-gt"><a href="#第二级标题-lt-h2-gt" class="headerlink" title="第二级标题 &lt;h2&gt;"></a>第二级标题 <code>&lt;h2&gt;</code></h2><h3 id="第三级标题-lt-h3-gt"><a href="#第三级标题-lt-h3-gt" class="headerlink" title="第三级标题 &lt;h3&gt;"></a>第三级标题 <code>&lt;h3&gt;</code></h3><h4 id="第四级标题-lt-h4-gt"><a href="#第四级标题-lt-h4-gt" class="headerlink" title="第四级标题 &lt;h4&gt;"></a>第四级标题 <code>&lt;h4&gt;</code></h4><h5 id="第五级标题-lt-h5-gt"><a href="#第五级标题-lt-h5-gt" class="headerlink" title="第五级标题 &lt;h5&gt;"></a>第五级标题 <code>&lt;h5&gt;</code></h5><h6 id="第六级标题-lt-h6-gt"><a href="#第六级标题-lt-h6-gt" class="headerlink" title="第六级标题 &lt;h6&gt;"></a>第六级标题 <code>&lt;h6&gt;</code></h6><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*这些文字会生成`&lt;em&gt;`*</span><br><span class="line">_这些文字会生成`&lt;u&gt;`_</span><br><span class="line"></span><br><span class="line">**这些文字会生成`&lt;strong&gt;`**</span><br><span class="line">__这些文字会生成`&lt;strong&gt;`__</span><br></pre></td></tr></table></figure><p>在 MWeb 中的快捷键为： <code>CMD + U</code>、<code>CMD + I</code>、<code>CMD + B</code><br>效果如下：</p><p><em>这些文字会生成<code>&lt;em&gt;</code></em><br><em>这些文字会生成<code>&lt;u&gt;</code></em></p><p><strong>这些文字会生成<code>&lt;strong&gt;</code></strong><br><strong>这些文字会生成<code>&lt;strong&gt;</code></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Markdown-的设计哲学&quot;&gt;&lt;a href=&quot;#Markdown-的设计哲学&quot; class=&quot;headerlink&quot; title=&quot;Markdown 的设计哲学&quot;&gt;&lt;/a&gt;Markdown 的设计哲学&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Markdown 的目標是實現「易讀易寫」。&lt;br&gt;不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。&lt;br&gt;Markdown 的語法有個==主要==的目的：用來作為一種網路內容的&lt;em&gt;寫作&lt;/em&gt;用語言。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Markdown" scheme="https://fjluda.github.io/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="https://fjluda.github.io/tags/Markdown/"/>
    
      <category term="MWeb" scheme="https://fjluda.github.io/tags/MWeb/"/>
    
      <category term="语法" scheme="https://fjluda.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>浅谈正则表达式中的分组和引用</title>
    <link href="https://fjluda.github.io/2016/05/06/2016-05-06-regular-expression-group/"/>
    <id>https://fjluda.github.io/2016/05/06/2016-05-06-regular-expression-group/</id>
    <published>2016-05-06T03:40:18.000Z</published>
    <updated>2018-04-03T00:12:21.787Z</updated>
    
    <content type="html"><![CDATA[<p>由正则表达式如何匹配相同字符出发，讲讲正则表达式中的选择、分组和引用。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在外刊君读者群中看到有人提出这样的一个需求：</p><blockquote><p>把字符串切成连续相同字符的正则怎么写？比如<code>abbcccdddd</code>切成<code>a,bb,ccc,dddd</code></p></blockquote><p>之前我对正则表达式也是略有研究，想尝试一下。其实我对正则表达式的学习基本完全来源于犀牛书的第10章，真正看懂这一章，我觉得操作正则表达式应该不在话下。</p><h2 id="我的答案"><a href="#我的答案" class="headerlink" title="我的答案"></a>我的答案</h2><p>先给出我的答案吧：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abbccddd'</span>.match(<span class="regexp">/(\w)\1*/g</span>) <span class="comment">// ["a", "bb", "cc", "ddd"]</span></span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>拿到这个问题，首先要匹配字符<code>[a-zA-Z0-9]</code>，这里直接使用<code>\w</code>。然后是全局匹配，在最后加上<code>g</code>。难点在于怎么判断重复。</p><p>翻看了犀牛书后，又读了一遍分组和引用的部分。使用小括号<code>()</code>将字符作为一个最小单元，同时小括号还能记忆这个组合相匹配的字符串。再使用反斜杠<code>\</code>引用前面分组的表达式，数字1表示第一个小括号。这时完成了2个字符重复的要求。最后再使用<code>*</code>来匹配出现0次或n次。这个正则表达式就写完了。</p><p>下面详细说说分组和引用。</p><p><strong>正则表达式的选择、分组和引用字符表</strong></p><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>`</td><td>`</td><td>选择，匹配的是该符号左边的子表达式或右边的子表达式</td></tr><tr><td><code>(...)</code></td><td>组合，将几个项组合为一个单元，这个单元可通过<code>*</code> <code>+</code> <code>?</code> `</td><td>` 等符号加以修饰，<strong>而且可以记住和这个组合相匹配的字符串以提供伺候的引用使用</strong></td></tr><tr><td><code>(?:...)</code></td><td>只组合，把项组合到一个段元，但不记忆与该组相匹配的字符</td></tr><tr><td><code>\n</code></td><td>和第n个分组第一次匹配的字符相匹配，组是圆括号中的子表达式（也有可能是嵌套的），组索引是从左到右的左括号数，<code>(?:</code>形式的分组不编码</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由正则表达式如何匹配相同字符出发，讲讲正则表达式中的选择、分组和引用。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;在外刊君读者群中看到有人提出这样的一个需求：&lt;/p&gt;

      
    
    </summary>
    
      <category term="JavaScript" scheme="https://fjluda.github.io/categories/JavaScript/"/>
    
    
      <category term="正则" scheme="https://fjluda.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="Regular" scheme="https://fjluda.github.io/tags/Regular/"/>
    
      <category term="分组" scheme="https://fjluda.github.io/tags/%E5%88%86%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>对这个 jekyll 博客主题的改版和重构</title>
    <link href="https://fjluda.github.io/2016/03/12/2016-03-12-jekyll-theme-version-2.0/"/>
    <id>https://fjluda.github.io/2016/03/12/2016-03-12-jekyll-theme-version-2.0/</id>
    <published>2016-03-12T03:40:18.000Z</published>
    <updated>2018-04-03T00:12:10.487Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要说明对这个博客主题的改版和代码重构的过程。这个简洁高雅的博客主题受到了很多朋友的喜欢。在写第一版界面时，我对前端并不是很熟悉，对<code>Jekyll</code>也不熟悉。现在距离当时也一年了，对自己当时写的代码也不太满意了，同时<code>Jekyll</code>如今也已经升级了，目前最新版为3.1.2。因此我在临近毕业尚未入职前做一下博客主题的代码重构和改版吧。</p><p>主要想做这些事情有：添加归档，添加标签，添加分类页面，主页显示文章摘要，代码去除 jQuery 和 BootStrap，优化移动端显示，将所有变量写入配置文件<code>_config.yml</code>中等。再优化一些细节吧。希望更多人会喜欢。</p><h2 id="改版重构说明"><a href="#改版重构说明" class="headerlink" title="改版重构说明"></a>改版重构说明</h2><ul><li><p><strong>使用 GitHub 风格的代码块 Markdown 写法 (Fenced code blocks)。</strong></p><p>  即 GFM(github flavored markdown) 的方式。</p><p>  Jekyll 已经升级至 3.1.2（2016-03），其中有一些新的要注意的地方，比如官网上说使用了 <code>Rouge</code> 去做代码高亮而不是默认的 <code>Pygments</code>，因为 <code>Jekyll</code> 本身是基于 Ruby 的，因此我看到官方说希望不再使用基于 Python 的 <code>Pygments</code> 了，而是都使用基于 Ruby 的代码。详情见官网升级说明 <a href="https://jekyllrb.com/docs/upgrading/2-to-3/#syntax-highlighter-changed" target="_blank" rel="noopener">syntax-highlighter-changed</a>。</p></li><li><p><strong>首页中添加摘要</strong></p><p>  摘要可以在每一篇 md 文件头中使用 excerpt 属性写出来。也可以在正文中，4个换行符来分割，这个设置见配置文件<code>_config.yml</code>。</p></li><li><p><strong>添加归档</strong></p><p>  上一版中没有归档，现在专门做了一个归档页面，当文章很多时方便根据年份快速查阅。</p></li><li><p><strong>添加标签</strong></p><p>  标签还是很有必要添加的，上一版中也没有这个功能。现在也可以根据标签查找文章了。同时标签还有一个重要的作用是，用来获取相似文章的。</p></li><li><p><strong>添加分类页</strong></p><p>  之前的分类就是在首页中直接完成的，现在和标签和归档类似，我将分类单独制作为一页，方便查阅。</p></li><li><p><strong>去掉 jQuery 和 BootStrap</strong></p><p>  我觉得太重了，没必要使用这两个库，使用原生 JavaScript 和 CSS就可以做到一样的效果，代码量大大减轻，载入速度略有提高。</p></li><li><p><strong>重写了demo页的瀑布流布局</strong></p><p>  改变数据写死的方式，将数据用 json 格式录入，由 JavaScript 拼接为 HTML 代码。同时，使用 <a href="http://masonry.desandro.com/" target="_blank" rel="noopener">Masonry</a>，重写了瀑布流布局。</p></li><li><p><strong>简化评论配置，支持 多说 和 disqus</strong></p><p>  在<code>_config.yml</code>中评论配置直接添加自己的<code>short_name</code>，评论就能正常使用了。</p></li></ul><p>下面列举一些可能遇到的问题，至少我是遇到了：</p><h2 id="RubyGems-无法访问，SSL-证书问题"><a href="#RubyGems-无法访问，SSL-证书问题" class="headerlink" title="RubyGems 无法访问，SSL 证书问题"></a>RubyGems 无法访问，SSL 证书问题</h2><p>以前我使用的是 RubyGems 的淘宝镜像<a href="https://ruby.taobao.org/" target="_blank" rel="noopener">https://ruby.taobao.org/</a>。现在这个镜像已经不再维护了，作者 <a href="https://ruby-china.org/huacnlee" target="_blank" rel="noopener">huacnlee (李华顺)</a> 转到 <a href="https://ruby-china.org/" target="_blank" rel="noopener">Ruby China</a> 中继续维护了，详情见 <a href="https://gems.ruby-china.org/" target="_blank" rel="noopener">RubyGems 镜像- Ruby China</a>。</p><h3 id="错误呈现"><a href="#错误呈现" class="headerlink" title="错误呈现"></a>错误呈现</h3><p>在执行任何<code>gem</code>命令的时候出现以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR:  While executing gem ... (Gem::RemoteFetcher::FetchError)</span><br><span class="line">    SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (https://gems.ruby-china.org/specs.4.8.gz)</span><br></pre></td></tr></table></figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>根据 <a href="https://gems.ruby-china.org/" target="_blank" rel="noopener">https://gems.ruby-china.org/</a> 页面最下方提供的 GitHub Issue 地址。</p><p>可以进入这个 issue：<a href="https://github.com/ruby-china/rubygems-mirror/issues/3" target="_blank" rel="noopener">https://github.com/ruby-china/rubygems-mirror/issues/3</a></p><p>其中 sanlengjingvv 给出了一个链接地址 <a href="https://gist.github.com/fnichol/867550" target="_blank" rel="noopener">https://gist.github.com/fnichol/867550</a> 里面提供了方法。我就是采用这里面的方法解决的。</p><p>我使用的是 <a href="https://gist.github.com/fnichol/867550#the-manual-way-boring" target="_blank" rel="noopener">The Manual Way</a>，因为 <a href="https://gist.github.com/fnichol/867550#the-ruby-way-fun" target="_blank" rel="noopener">The Ruby Way</a> 我没有成功，不知道什么原因，有兴趣的朋友可以试试。下面说说我的具体操作吧。</p><p>首先从 <a href="https://curl.haxx.se/ca/cacert.pem" target="_blank" rel="noopener">https://curl.haxx.se/ca/cacert.pem</a> 将文件<code>cacert.pem</code>下载至 <code>C:\RailsInstaller\cacert.pem</code></p><p>然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set SSL_CERT_FILE=C:\RailsInstaller\cacert.pem</span><br></pre></td></tr></table></figure><p>就成功了，不会再出现 SSL 错误了。</p><p>最后原文中说，为了长久设置，将这个目录存入控制面板中。我没理解是什么意思，是指环境变量吗？有朋友知道的话，欢迎留言告知我。</p><p>我存入环境变量后，还是会出现 SSL 错误，这时再次执行上面那条命令即可。</p><h2 id="jekyll-paginate-依赖缺失"><a href="#jekyll-paginate-依赖缺失" class="headerlink" title="jekyll-paginate 依赖缺失"></a>jekyll-paginate 依赖缺失</h2><p>因为 jekyll 3 中默认安装已经没有这个分页组件了，官方把这个分页组件插件化了，因此要独立安装。详情见 <a href="https://jekyllrb.com/docs/pagination/" target="_blank" rel="noopener">https://jekyllrb.com/docs/pagination/</a>。</p><h3 id="错误呈现-1"><a href="#错误呈现-1" class="headerlink" title="错误呈现"></a>错误呈现</h3><p>在启动 jekyll 服务的时候出现以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jekyll serve</span><br><span class="line">Configuration file: c:/gitWorkSpace/blog-based-on-jekyll-3/_config.yml</span><br><span class="line">  Dependency Error: Yikes! It looks like you don&apos;t have jekyll-paginate or one of its dependencies installed. In order to use Jekyll as currently configured, you&apos;ll need to install this gem. The full error message from Ruby is: &apos;cannot load such file -- jekyll-paginate&apos; If you run into trouble, you can find helpful resources at http://jekyllrb.com/help/!</span><br><span class="line">jekyll 3.1.2 | Error:  jekyll-paginate</span><br></pre></td></tr></table></figure><h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><p>我们安装这个插件到本地即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gem install jekyll-paginate</span><br><span class="line">Fetching: jekyll-paginate-1.1.0.gem (100%)</span><br><span class="line">Successfully installed jekyll-paginate-1.1.0</span><br><span class="line">Parsing documentation for jekyll-paginate-1.1.0</span><br><span class="line">Installing ri documentation for jekyll-paginate-1.1.0</span><br><span class="line">Done installing documentation for jekyll-paginate after 3 seconds</span><br><span class="line">1 gem installed</span><br></pre></td></tr></table></figure><h2 id="被-Foxit-pdf-reader-占用4000端口"><a href="#被-Foxit-pdf-reader-占用4000端口" class="headerlink" title="被 Foxit pdf reader 占用4000端口"></a>被 Foxit pdf reader 占用4000端口</h2><h3 id="错误呈现-2"><a href="#错误呈现-2" class="headerlink" title="错误呈现"></a>错误呈现</h3><p>在本地使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jekyll serve</span><br></pre></td></tr></table></figure><p>出现错误，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">jekyll serve</span><br><span class="line">Configuration file: E:/GitWorkSpace/blog/_config.yml</span><br><span class="line">           Source: E:/GitWorkSpace/blog</span><br><span class="line">      Destination: E:/GitWorkSpace/blog/_site</span><br><span class="line">Incremental build: disabled. Enable with --incremental</span><br><span class="line">     Generating...</span><br><span class="line">                   done in 0.547 seconds.</span><br><span class="line"> Please add the following to your Gemfile to avoid polling for changes:</span><br><span class="line">   gem &apos;wdm&apos;, &apos;&gt;= 0.1.0&apos; if Gem.win_platform?</span><br><span class="line">Auto-regeneration: enabled for &apos;E:/GitWorkSpace/blog&apos;</span><br><span class="line">Configuration file: E:/GitWorkSpace/blog/_config.yml</span><br><span class="line">jekyll 3.1.1 | Error:  Permission denied - bind(2) for 127.0.0.1:4000</span><br></pre></td></tr></table></figure><p>网上查阅后，这篇博文解决了我的问题。<a href="http://lxconan.github.io/2016/01/07/who-is-using-my-port/" target="_blank" rel="noopener">谁占了我的端口 for Windows –By Liu Xia, ThoughtWorks Senior Consultant. .NET Expert</a></p><p>上述报错主要原因是，jekyll 启动使用的4000端口被福昕pdf阅读器的自动更新进程占用了，关掉这个进程，jekyll在本地调试启动服务时就没有问题了。</p><h3 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h3><p>简单的解决方法是：</p><p>输入命令，查看各端口被占用情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure><p>找到4000端口被占用的<code>PID</code></p><p>我的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">协议  本地地址          外部地址          状态           PID</span><br><span class="line">TCP  0.0.0.0:80        0.0.0.0:0         LISTENING     4</span><br><span class="line">TCP  0.0.0.0:135       0.0.0.0:0         LISTENING     836</span><br><span class="line">TCP  0.0.0.0:445       0.0.0.0:0         LISTENING     4</span><br><span class="line">TCP  0.0.0.0:1801      0.0.0.0:0         LISTENING     2312</span><br><span class="line">TCP  0.0.0.0:2103      0.0.0.0:0         LISTENING     2312</span><br><span class="line">TCP  0.0.0.0:2105      0.0.0.0:0         LISTENING     2312</span><br><span class="line">TCP  0.0.0.0:2107      0.0.0.0:0         LISTENING     2312</span><br><span class="line">TCP  0.0.0.0:3306      0.0.0.0:0         LISTENING     2404</span><br><span class="line">TCP  0.0.0.0:3389      0.0.0.0:0         LISTENING     1172</span><br><span class="line">TCP  0.0.0.0:49664     0.0.0.0:0         LISTENING     584</span><br><span class="line">TCP  0.0.0.0:49665     0.0.0.0:0         LISTENING     1072</span><br><span class="line">TCP  0.0.0.0:49666     0.0.0.0:0         LISTENING     460</span><br><span class="line">TCP  0.0.0.0:49667     0.0.0.0:0         LISTENING     1000</span><br><span class="line">TCP  0.0.0.0:49670     0.0.0.0:0         LISTENING     696</span><br><span class="line">TCP  0.0.0.0:49678     0.0.0.0:0         LISTENING     2312</span><br><span class="line">TCP  0.0.0.0:49692     0.0.0.0:0         LISTENING     688</span><br><span class="line">TCP  127.0.0.1:4000    0.0.0.0:0         LISTENING     2476</span><br><span class="line">TCP  127.0.0.1:4000    127.0.0.1:55160   ESTABLISHED   2476</span><br><span class="line">TCP  127.0.0.1:4012    0.0.0.0:0         LISTENING     12724</span><br></pre></td></tr></table></figure><p>可以看到4000端口的PID是2476。下面查看是什么进程，命令行中输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist /svc /FI &quot;PID eq 2476&quot;</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">映像名称                       PID 服务</span><br><span class="line">========================= ======== ============================================</span><br><span class="line">FoxitProtect.exe              2476 FxService</span><br></pre></td></tr></table></figure><p>可以看到正是福昕阅读器。下面关掉这个服务就好了。在 win10 中进入任务管理器，选择服务选项卡，关闭这个服务就好了，如下图：</p><p><img src="http://ww4.sinaimg.cn/large/7011d6cfjw1f1ty28wwj4j20g00aiju7.jpg" alt=""></p><p>当然也可以在启动jekyll服务的时候指定端口号，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jekyll serve --port 3000</span><br></pre></td></tr></table></figure><p>这样在浏览器中输入 <a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a> 就可以访问了。</p><p>还可以在配置文件<code>_config.yml</code>中添加端口号设置（参考<a href="https://jekyllrb.com/docs/configuration/#serve-command-options" target="_blank" rel="noopener">官网文档-Serve Command OptionsPermalink</a>），如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># port</span><br><span class="line">port: 1234</span><br></pre></td></tr></table></figure><p>此时，启动jekyll服务后，访问 <a href="http://localhost:1234/" target="_blank" rel="noopener">http://localhost:1234/</a> 即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要说明对这个博客主题的改版和代码重构的过程。这个简洁高雅的博客主题受到了很多朋友的喜欢。在写第一版界面时，我对前端并不是很熟悉，对&lt;code&gt;Jekyll&lt;/code&gt;也不熟悉。现在距离当时也一年了，对自己当时写的代码也不太满意了，同时&lt;code&gt;Jekyll&lt;/co
      
    
    </summary>
    
      <category term="jekyll" scheme="https://fjluda.github.io/categories/jekyll/"/>
    
    
      <category term="HTML" scheme="https://fjluda.github.io/tags/HTML/"/>
    
      <category term="CSS" scheme="https://fjluda.github.io/tags/CSS/"/>
    
      <category term="jekyll" scheme="https://fjluda.github.io/tags/jekyll/"/>
    
      <category term="端口" scheme="https://fjluda.github.io/tags/%E7%AB%AF%E5%8F%A3/"/>
    
      <category term="markdown" scheme="https://fjluda.github.io/tags/markdown/"/>
    
      <category term="Foxit" scheme="https://fjluda.github.io/tags/Foxit/"/>
    
      <category term="RubyGems" scheme="https://fjluda.github.io/tags/RubyGems/"/>
    
  </entry>
  
  <entry>
    <title>在低版本 IE 中点击空 block 元素的问题</title>
    <link href="https://fjluda.github.io/2015/07/24/2015-07-24-low-IE-click-empty-block-bug/"/>
    <id>https://fjluda.github.io/2015/07/24/2015-07-24-low-IE-click-empty-block-bug/</id>
    <published>2015-07-23T16:06:05.000Z</published>
    <updated>2018-04-03T00:11:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>当我们点击一个空的、没有任何内容的 div 或者其他块级元素时。在 IE11 以下，是没有反应的。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>这类问题使用场景还是很普遍的。比如 UI 给了一张大图，要点击图上的某一块位置的时候。可以用一个空的 div 定位到相应的位置，然后对它进行绑定事件。</p><hr><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>解决方法很简单，即给这个块级元素填充任意颜色，然后将其透明度设置为0。代码如下：</p><pre><code>background-color: #fff;opacity: 0;filter:alpha(opacity=0);</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;当我们点击一个空的、没有任何内容的 div 或者其他块级元素时。在 IE11 以下，是没有反应的。&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="CSS" scheme="https://fjluda.github.io/categories/CSS/"/>
    
    
      <category term="HTML" scheme="https://fjluda.github.io/tags/HTML/"/>
    
      <category term="CSS" scheme="https://fjluda.github.io/tags/CSS/"/>
    
      <category term="IE" scheme="https://fjluda.github.io/tags/IE/"/>
    
      <category term="兼容性" scheme="https://fjluda.github.io/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 阶段总结</title>
    <link href="https://fjluda.github.io/2015/07/09/2015-07-09-JavaScript-Net/"/>
    <id>https://fjluda.github.io/2015/07/09/2015-07-09-JavaScript-Net/</id>
    <published>2015-07-08T16:06:05.000Z</published>
    <updated>2018-04-03T00:11:42.245Z</updated>
    
    <content type="html"><![CDATA[<p>做了一张思维导图。总结这几个月对 JavaScript 的学习吧，也是一个复习。也是我目前的技能树。</p><p><img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-JavaScriptNet2.png" alt="JavaScriptNet"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做了一张思维导图。总结这几个月对 JavaScript 的学习吧，也是一个复习。也是我目前的技能树。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-JavaScriptNet2.png&quot; alt=&quot;J
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://fjluda.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://fjluda.github.io/tags/JavaScript/"/>
    
      <category term="HTML" scheme="https://fjluda.github.io/tags/HTML/"/>
    
      <category term="CSS" scheme="https://fjluda.github.io/tags/CSS/"/>
    
      <category term="思维导图" scheme="https://fjluda.github.io/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
      <category term="技能树" scheme="https://fjluda.github.io/tags/%E6%8A%80%E8%83%BD%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>随机不重复数值</title>
    <link href="https://fjluda.github.io/2015/06/22/2018-04-01-%E9%9A%8F%E6%9C%BA%E4%B8%8D%E9%87%8D%E5%A4%8D%E6%95%B0%E5%80%BC/"/>
    <id>https://fjluda.github.io/2015/06/22/2018-04-01-随机不重复数值/</id>
    <published>2015-06-22T01:06:05.000Z</published>
    <updated>2018-04-02T23:45:51.379Z</updated>
    
    <content type="html"><![CDATA[<p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">sub a()</span><br><span class="line"></span><br><span class="line">  Const bb As Integer = <span class="number">1000</span> - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  Dim RndNumber, TempArray(bb), kk(bb), i As Integer</span><br><span class="line"></span><br><span class="line">  Randomize (Timer)</span><br><span class="line"></span><br><span class="line">For i = <span class="number">0</span> To bb</span><br><span class="line"></span><br><span class="line">      TempArray(i) = i</span><br><span class="line"></span><br><span class="line">  Next i</span><br><span class="line"></span><br><span class="line">  j = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  For i = bb To <span class="number">1</span> Step <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">     RndNumber = Int(i * Rnd)</span><br><span class="line"></span><br><span class="line">     kk(i) = TempArray(RndNumber) + <span class="number">1</span> <span class="string">' 随机不重复数值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     TempArray(RndNumber) = TempArray(i)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     j = j + 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Next i</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">end sub</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
      <category term="VBA" scheme="https://fjluda.github.io/categories/VBA/"/>
    
    
      <category term="EXCEL" scheme="https://fjluda.github.io/tags/EXCEL/"/>
    
      <category term="VBA" scheme="https://fjluda.github.io/tags/VBA/"/>
    
      <category term="代码" scheme="https://fjluda.github.io/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>EXCEL VBA连接ACCESS数据库</title>
    <link href="https://fjluda.github.io/2015/06/22/2018-04-01-EXCEL%20VBA%E8%BF%9E%E6%8E%A5ACCESS%E6%95%B0%E6%8D%AE/"/>
    <id>https://fjluda.github.io/2015/06/22/2018-04-01-EXCEL VBA连接ACCESS数据/</id>
    <published>2015-06-22T01:06:05.000Z</published>
    <updated>2018-04-02T23:46:10.437Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、添加数据"><a href="#一、添加数据" class="headerlink" title="一、添加数据"></a>一、添加数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">Sub a()</span><br><span class="line"></span><br><span class="line"><span class="string">'Option Explicit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public myData As String, myTable As String, SQL As String</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public cnn As ADODB.Connection</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public rs As ADODB.Recordset</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">On Error GoTo hhh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">myData = ThisWorkbook.Path &amp; "\SWDB.mdb"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Set cnn = New ADODB.Connection</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    With cnn</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .Provider = "Microsoft.Ace.OleDB.12.0"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .Open myData</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    End With</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">myTable = "SW01"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SQL = "select * from " &amp; myTable</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for i=1 to 4 '</span>可添加<span class="number">4</span>次</span><br><span class="line"></span><br><span class="line">rs.Fields(<span class="string">"a"</span>) = Cells(<span class="number">5</span> + i, <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">next i</span><br><span class="line"></span><br><span class="line">rs.Update</span><br><span class="line"></span><br><span class="line">MsgBox <span class="string">"添加成功！"</span>, vbOKOnly + vbInformation, <span class="string">"创建数据"</span></span><br><span class="line"></span><br><span class="line">rs.Close</span><br><span class="line"></span><br><span class="line">cnn.Close</span><br><span class="line"></span><br><span class="line"><span class="built_in">Set</span> rs = Nothing</span><br><span class="line"></span><br><span class="line"><span class="built_in">Set</span> cnn = Nothing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hhh:</span><br><span class="line"></span><br><span class="line">MsgBox <span class="string">"添加数据时出现错误!"</span> &amp; vbCrLf &amp; <span class="string">"原因:该编号重复或数据类型不对，请查找原因."</span>, vbCritical, <span class="string">"提示！！！！"</span></span><br><span class="line"></span><br><span class="line">end sub</span><br></pre></td></tr></table></figure><h2 id="二、修改数据"><a href="#二、修改数据" class="headerlink" title="二、修改数据"></a>二、修改数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Option Explicit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public myData As String, myTable As String, SQL As String</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public cnn As ADODB.Connection</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public rs As ADODB.Recordset</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">myData = ThisWorkbook.Path &amp; "\SWDB.mdb"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set cnn = New ADODB.Connection</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    With cnn</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .Provider = "Microsoft.Ace.OleDB.12.0"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .Open myData</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    End With</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">myTable = "SWHH"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">On Error GoTo hhh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SQL1 = "update " &amp; myTable &amp; " set "</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SQL = SQL1 &amp; "盒号='</span><span class="string">" &amp; [a2] &amp; "</span><span class="string">'  , 盒质量=" &amp; [b2] &amp; " , 保存时间= " &amp; da &amp; " where 盒号='</span><span class="string">" &amp; [a2] &amp; "</span><span class="string">'"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set rs = cnn.Execute(SQL)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set rs = New ADODB.Recordset</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rs.Open SQL, cnn, adOpenKeyset, adLockOptimistic</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rs.Close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cnn.Close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set rs = Nothing</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set cnn = Nothing</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">hhh:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    MsgBox "保存数据出现错误!" &amp; vbCrLf &amp; "原因:该编号重复或数据类型不对.", vbCritical, "保存数据"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">end sub</span></span><br></pre></td></tr></table></figure><h2 id="三、查询数据"><a href="#三、查询数据" class="headerlink" title="三、查询数据"></a>三、查询数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Option Explicit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public myData As String, myTable As String, SQL As String</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public cnn As ADODB.Connection</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public rs As ADODB.Recordset</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">myData = ThisWorkbook.Path &amp; "\SWDB.mdb"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set cnn = New ADODB.Connection</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    With cnn</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .Provider = "Microsoft.Ace.OleDB.12.0"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .Open myData</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    End With</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SQL = "select * from " &amp; myTable &amp; " where KID=" &amp; [s2] &amp; " order by ID DESC"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set rs = cnn.Execute(SQL)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set rs = New ADODB.Recordset</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rs.Open SQL, cnn, adOpenKeyset, adLockOptimistic</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">If rs.RecordCount &gt; 0 Then    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    For i = 1 To rs.RecordCount</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       Cells(5 + i, 2) = rs.Fields("a")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       rs.MoveNext</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Next i</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Else</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       MsgBox "没有查询到相关数据", vbCritical</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">End If</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rs.Close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cnn.Close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set rs = Nothing</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set cnn = Nothing</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">end sub</span></span><br></pre></td></tr></table></figure><h2 id="四、删除数据"><a href="#四、删除数据" class="headerlink" title="四、删除数据"></a>四、删除数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">sub a()</span><br><span class="line"></span><br><span class="line"><span class="string">'Option Explicit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public myData As String, myTable As String, SQL As String</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public cnn As ADODB.Connection</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Public rs As ADODB.Recordset</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">myData = ThisWorkbook.Path &amp; "\SWDB.mdb"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Set cnn = New ADODB.Connection</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    With cnn</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .Provider = "Microsoft.Ace.OleDB.12.0"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .Open myData</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    End With</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if MsgBox("本数据删除后,将无法恢复!" &amp; vbCrLf &amp; "是否要删除?", vbQuestion + vbYesNo, "删除数据") = vbNo Then Exit Sub</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">myTable = "SW01"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SQL = "delete from " &amp; myTable &amp; " where  KID= " &amp; [s2]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set rs = cnn.Execute(SQL)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set rs = New ADODB.Recordset</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rs.Open SQL, cnn, adOpenKeyset, adLockOptimistic</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">MsgBox "已经成功将序号为： " &amp; [s2] &amp; "    数据删除！", vbInformation</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rs.Close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cnn.Close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set rs = Nothing</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set cnn = Nothing</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">end sub</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、添加数据&quot;&gt;&lt;a href=&quot;#一、添加数据&quot; class=&quot;headerlink&quot; title=&quot;一、添加数据&quot;&gt;&lt;/a&gt;一、添加数据&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
      <category term="VBA" scheme="https://fjluda.github.io/categories/VBA/"/>
    
    
      <category term="EXCEL" scheme="https://fjluda.github.io/tags/EXCEL/"/>
    
      <category term="VBA" scheme="https://fjluda.github.io/tags/VBA/"/>
    
      <category term="ACCESS" scheme="https://fjluda.github.io/tags/ACCESS/"/>
    
      <category term="数据库" scheme="https://fjluda.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Weinre --WebApp 调试工具</title>
    <link href="https://fjluda.github.io/2015/06/18/2015-06-18-weinre/"/>
    <id>https://fjluda.github.io/2015/06/18/2015-06-18-weinre/</id>
    <published>2015-06-17T16:06:05.000Z</published>
    <updated>2018-04-03T00:11:33.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-weinre？"><a href="#什么是-weinre？" class="headerlink" title="什么是 weinre？"></a>什么是 weinre？</h2><p><a href="http://people.apache.org/~pmuellr/weinre/docs/latest/Home.html" target="_blank" rel="noopener">weinre官网</a> 上有两句有意思的介绍：</p><blockquote><p><strong>weinre</strong> is <strong>WE</strong>b <strong>IN</strong>spector <strong>RE</strong>mote. Pronounced like the word “winery”. Or maybe like the word “weiner”. Who knows, really.</p><p><strong>weinre</strong> is a debugger for web pages, like FireBug (for FireFox) and Web Inspector (for WebKit-based browsers), except it’s designed to work remotely, and in particular, to allow you debug web pages on a mobile device such as a phone.</p></blockquote><p>上面说 weinre 是一个远程 web 调试器。说到了它的发音，还挺幽默，哈哈。</p><p>远程 web 调试器。先说调试器，就像火狐中的 FireBug，Chrome 中的调试器一样。就是在浏览器中按下 <code>F12</code> 出现的那个工具。但是在手机上，你没办法按 <code>F12</code>，而这个 weinre 就是在手机上的 <code>F12</code>，与传统的不同的是，它是在手机上浏览你的 web 页面，在 PC 上查看调试工具，非常方便，这就是所谓的远程。</p><hr><h2 id="为什么用-weinre？"><a href="#为什么用-weinre？" class="headerlink" title="为什么用 weinre？"></a>为什么用 weinre？</h2><p>现代浏览器中调试工具都非常强大了，可以直接模拟手机设备，为什么还要用 weinre 这么麻烦的东西呢？</p><p>我觉得 PC 端的浏览器虽说可以模拟，但模拟毕竟还是模拟，还只是鼠标长按滑来滑去。在开发过程中，使用手机或平板直接来感受是多么的酷，指尖在移动设备的屏幕上摩擦摩擦！给人的直观感受绝对秒杀浏览器的模拟。</p><hr><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>使用一种工具之前，了解它的原理和结构是很有帮助的。weinre 作为一种远程调试工具，在结构上分为三层：</p><ul><li>目标页面（target）：被调试的页面，页面已嵌入 weinre 的远程 js，下文会介绍；</li><li>Debug客户端（client）：本地的 Web Inspector 调试客户端；</li><li>Debug服务端（agent）：一个 HTTP Server，为目标页面与 Debug 客户端建立通信。</li></ul><p>三层结构如下图所示：</p><p><img src="http://muellerware.org/papers/weinre/images/http-flow.png" alt="http-flow"></p><p>weinre 的 debug 客户端是基于 Web Inspector 开发，而 Web Inspector 只与以 WebKit 为核心的浏览器兼容，所以 Weinre 的客户端只能用 Chrome 或者 Safari 打开。</p><p><a href="http://people.apache.org/~pmuellr/weinre/docs/latest/Home.html" target="_blank" rel="noopener">官网</a>上也有相应的平台支持说明：</p><ul><li><p>Platforms supported - debug server 服务端</p><p>  任何支持 node.js 的平台。</p></li><li><p>Platforms supported - debug client 客户端（跑 debugger 界面的浏览器）</p><ul><li>Google Chrome</li><li>Apple Safari</li><li>Other recent-ish WebKit-based browsers 其他基于 webkit 内核的现代浏览器</li></ul></li><li><p>Platforms supported - debug target 目标页面（在移动设备中调试运行的目标页面）</p><ul><li>Android Browser application</li><li>iOS Mobile Safari application</li><li>PhoneGap/Cordova</li><li>other</li></ul></li></ul><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>weinre 是 nodeJS 的一个应用，首先要 <a href="https://nodejs.org/" target="_blank" rel="noopener">安装 nodeJS 运行环境</a></li><li><p>使用 npm 命令，安装 weinre</p><pre><code>npm -g install weinre</code></pre><p> 安装成功后会有类似的信息：</p><pre><code>C:\Users\haoyang\AppData\Roaming\npm\weinre -&gt; C:\Users\haoyang\AppData\Roaming\npm\node_modules\weinre\weinreweinre@2.0.0-pre-I0Z7U9OV C:\Users\haoyang\AppData\Roaming\npm\node_modules\weinre├── underscore@1.7.0├── nopt@3.0.2 (abbrev@1.0.7)└── express@2.5.11 (mime@1.2.4, qs@0.4.2, mkdirp@0.3.0, connect@1.9.2)</code></pre></li></ol><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>启动服务</p><pre><code>weinre --boundHost -all- --httpPort 8081</code></pre><ul><li><p>–boundHost [hostname | ip address | -all-]</p><p>  The ip address to bind the server to.</p></li><li><p>–httpPort [portNumber]</p><p>  The port to run the HTTP server on.</p><p>更多配置项参考 <a href="http://people.apache.org/~pmuellr/weinre/docs/latest/Running.html" target="_blank" rel="noopener">官网的说明</a>。</p></li></ul></li><li><p>启动成功后看到如下界面：</p><p> <img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-weinre.png" alt="weinre"></p></li><li><p>给目标页面添加一行脚本</p><p> 可以看到 2.中的 Target Script 说要添加一行脚本到要调试的 web 页面中。</p><p> Target Script</p><p> You can use this script to inject the weinre target code into your web page.</p><p> <a href="http://localhost:8081/target/target-script-min.js#anonymous" target="_blank" rel="noopener">http://localhost:8081/target/target-script-min.js#anonymous</a></p><p> Example:</p><pre><code>&lt;script src=&quot;http://localhost:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code></pre><p> 这里要说明一下，要把上面的 localhost 换为本机的 ip 地址。</p><p> 我们可以在命令行中 使用 <code>ipconfig</code> 得到 ip 地址，如下（当然你的可能和我的不一样）：</p><pre><code>IPv4 地址 . . . . . . . . . . . . : 192.168.1.107</code></pre><p> 即插入如下代码：</p><pre><code>&lt;script src=&quot;http://192.168.1.107:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code></pre></li><li><p>进入调试页面</p><p> PC 端访问这个地址：</p><p> debug client user interface:    <a href="http://localhost:8081/client/#anonymous" target="_blank" rel="noopener">http://localhost:8081/client/#anonymous</a></p><p> 此时 target 为 none，如下图：</p><p> <img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-target-none.png" alt="target-none"></p><p> 现在我们要用手机访问同一个局域网下的这个目标页面。我们可以把要调试的页面放到这个路径下：</p><pre><code>C:\Users\haoyang\AppData\Roaming\npm\node_modules\weinre\web</code></pre><p> 通过 <a href="http://192.168.1.107:8081/FILE_NAME" target="_blank" rel="noopener">http://192.168.1.107:8081/FILE_NAME</a> 在手机上访问，就可以看到了。当然前提是同一个局域网。</p><p> 但是这样可能不太灵活，每次都要把目标页面放到指定的目录下。所以我们可以另外开一个服务器。</p><p> 我使用了基于 node.js 的 http-server 工具。将要调试的页面发布。这样我就能通过 ip 地址加端口号在手机上访问到了。</p><p> 我在手机上访问 <a href="http://192.168.1.107:8080" target="_blank" rel="noopener">http://192.168.1.107:8080</a> 打开要调试的页面，此时 debug client user interface 中自动检测到 target。就可以进行调试了！</p><p> 如下图：</p><p> <img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-target.png" alt="target"></p><p> <img src="http://7q5cdt.com1.z0.glb.clouddn.com/blog-1954958440_meitu_2.jpg" alt="phone"></p></li></ol><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://blog.csdn.net/dojotoolkit/article/details/6280924" target="_blank" rel="noopener">Web移动应用调试工具——Weinre</a></li><li><a href="http://muellerware.org/papers/weinre/manual.html" target="_blank" rel="noopener">weinre - WEb INspector REmote</a></li><li><a href="http://blog.csdn.net/smy_yu/article/details/38922315" target="_blank" rel="noopener">webapp开发调试环境–weinre配置</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是-weinre？&quot;&gt;&lt;a href=&quot;#什么是-weinre？&quot; class=&quot;headerlink&quot; title=&quot;什么是 weinre？&quot;&gt;&lt;/a&gt;什么是 weinre？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://people.apache.org/
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://fjluda.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://fjluda.github.io/tags/JavaScript/"/>
    
      <category term="HTML" scheme="https://fjluda.github.io/tags/HTML/"/>
    
      <category term="CSS" scheme="https://fjluda.github.io/tags/CSS/"/>
    
      <category term="Weinre" scheme="https://fjluda.github.io/tags/Weinre/"/>
    
      <category term="WebApp" scheme="https://fjluda.github.io/tags/WebApp/"/>
    
      <category term="调试工具" scheme="https://fjluda.github.io/tags/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
